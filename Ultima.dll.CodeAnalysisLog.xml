<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="f:\programas\microsoft visual studio 14.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="14.0">
 <Namespaces>
  <Namespace Name="Ultima">
   <Messages>
    <Message Id="Ultima" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ultima' in namespace name 'Ultima'.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="F:\Programacao\ServUO\Ultima.dll">
   <Modules>
    <Module Name="ultima.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'Ultima.dll' with a strong name key.</Issue>
      </Message>
      <Message Id="Ultima" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ultima' in assembly name 'Ultima.dll'.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithAssemblyVersion" Category="Microsoft.Design" CheckId="CA1016" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Add an AssemblyVersion attribute to 'Ultima.dll'.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'Ultima.dll' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithComVisible" Category="Microsoft.Design" CheckId="CA1017" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
       <Issue Name="NoAttribute" Certainty="95" Level="CriticalError">Because 'Ultima.dll' exposes externally visible types, mark it with ComVisible(false) at the assembly level and then mark all types within the assembly that should be exposed to COM clients with ComVisible(true).</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="Ultima">
       <Types>
        <Type Name="AnimationEdit" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'AnimationEdit' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning">Initialize all static fields in 'AnimationEdit' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExportToVD(System.Int32,System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local3' can be disposed more than once in method 'AnimationEdit.ExportToVD(int, int, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
            <Message Id="filetype" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'AnimationEdit.ExportToVD(int, int, string)', correct the spelling of 'filetype' in parameter name 'filetype' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAnimation(System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'AnimationEdit.GetAnimation(int, int, int, int)', correct the spelling of 'dir' in parameter name 'dir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="filetype" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'AnimationEdit.GetAnimation(int, int, int, int)', correct the spelling of 'filetype' in parameter name 'filetype' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsActionDefinied(System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Definied" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Definied' in member name 'AnimationEdit.IsActionDefinied(int, int, int)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="filetype" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'AnimationEdit.IsActionDefinied(int, int, int)', correct the spelling of 'filetype' in parameter name 'filetype' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromVD(System.Int32,System.Int32,System.IO.BinaryReader)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filetype" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'AnimationEdit.LoadFromVD(int, int, BinaryReader)', correct the spelling of 'filetype' in parameter name 'filetype' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'AnimationEdit.LoadFromVD(int, int, BinaryReader)', validate parameter 'bin' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_FileIndex" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'AnimationEdit.m_FileIndex' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_FileIndex2" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'AnimationEdit.m_FileIndex2' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_FileIndex3" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'AnimationEdit.m_FileIndex3' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_FileIndex4" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'AnimationEdit.m_FileIndex4' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_FileIndex5" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'AnimationEdit.m_FileIndex5' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local4' can be disposed more than once in method 'AnimationEdit.Save(int, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
             <Issue Certainty="75" Level="Warning">Object 'Local5' can be disposed more than once in method 'AnimationEdit.Save(int, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
            <Message Id="filetype" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'AnimationEdit.Save(int, string)', correct the spelling of 'filetype' in parameter name 'filetype' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="filetype-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning">Correct the potential overflow in the operation 'filetype-1' in 'AnimationEdit.Save(int, string)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Animations" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'Animations' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetAnimation(System.Int32,System.Int32,System.Int32,System.Int32&amp;,System.Boolean,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local9' can be disposed more than once in method 'Animations.GetAnimation(int, int, int, ref int, bool, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
            <Message Id="3#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'hue' be a reference parameter.</Issue>
            </Message>
            <Message Id="First" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'Animations.GetAnimation(int, int, int, ref int, bool, bool)', correct the casing of 'First' in parameter name 'FirstFrame' by changing it to 'first'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAnimCount(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Anim" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Anim' in member name 'Animations.GetAnimCount(int)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="fileType-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning">Correct the potential overflow in the operation 'fileType-1' in 'Animations.GetAnimCount(int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAnimLength(System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Anim" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Anim' in member name 'Animations.GetAnimLength(int, int)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="fileType-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning">Correct the potential overflow in the operation 'fileType-1' in 'Animations.GetAnimLength(int, int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFileName(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Animations.GetFileName(int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsAnimDefinied(System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Anim" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Anim' in member name 'Animations.IsAnimDefinied(int, int, int, int)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Definied" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Definied' in member name 'Animations.IsAnimDefinied(int, int, int, int)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Animations.IsAnimDefinied(int, int, int, int)', correct the spelling of 'dir' in parameter name 'dir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_FileIndex" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Animations.m_FileIndex' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_FileIndex2" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Animations.m_FileIndex2' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_FileIndex3" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Animations.m_FileIndex3' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_FileIndex4" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Animations.m_FileIndex4' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_FileIndex5" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Animations.m_FileIndex5' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_MemoryStream" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Animations.m_MemoryStream' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_StreamBuffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Animations.m_StreamBuffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Table" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Animations.m_Table' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Translate(System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'body' be a reference parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Translate(System.Int32&amp;,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'body' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'hue' be a reference parameter.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Animdata" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Animdata" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Animdata' in type name 'Animdata'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'Animdata' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AnimData" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'Animdata.AnimData' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message Id="Anim" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Anim' in member name 'Animdata.AnimData' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="SameType" Certainty="95" Level="Error">The property name 'Animdata.AnimData' is confusing given the existence of method 'Animdata.GetAnimData(int)'. Rename or remove one of these members.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAnimData(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Anim" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Anim' in member name 'Animdata.GetAnimData(int)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Initialize()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local1' can be disposed more than once in method 'Animdata.Initialize()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Header" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Animdata.m_Header' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Unknown" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Animdata.m_Unknown' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local0' can be disposed more than once in method 'Animdata.Save(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Animdata+Data" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Animdata.Data'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="System" Certainty="95" Level="Error">The type name 'Animdata.Data' conflicts in whole or in part with the namespace name 'System.Data' defined in the .NET Framework. Rename the type to eliminate the conflict.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.SByte[],System.Byte,System.Byte,System.Byte,System.Byte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="fcount" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Animdata.Data.Data(sbyte[], byte, byte, byte, byte)', correct the spelling of 'fcount' in parameter name 'fcount' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="finter" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Animdata.Data.Data(sbyte[], byte, byte, byte, byte)', correct the spelling of 'finter' in parameter name 'finter' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="fstart" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Animdata.Data.Data(sbyte[], byte, byte, byte, byte)', correct the spelling of 'fstart' in parameter name 'fstart' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Animdata.Data.Data(sbyte[], byte, byte, byte, byte)', correct the spelling of 'unk' in parameter name 'unk' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FrameData" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'Animdata.Data.FrameData' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AnimIdx" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Anim" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Anim' in type name 'AnimIdx'.</Issue>
          </Message>
          <Message Id="Idx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Idx' in type name 'AnimIdx'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Int32,Ultima.FileIndex,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local3' can be disposed more than once in method 'AnimIdx.AnimIdx(int, FileIndex, int)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
            <Message Id="filetype" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'AnimIdx.AnimIdx(int, FileIndex, int)', correct the spelling of 'filetype' in parameter name 'filetype' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="filetype" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning">Parameter 'filetype' of 'AnimIdx.AnimIdx(int, FileIndex, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'AnimIdx.AnimIdx(int, FileIndex, int)', validate parameter 'fileIndex' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.IO.BinaryReader,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'AnimIdx.AnimIdx(BinaryReader, int)', validate parameter 'bin' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExportPalette(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error">In member 'AnimIdx.ExportPalette(string, int)', the discrete term 'filename' in parameter name 'filename' should be expressed as a compound word, 'fileName'.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'AnimIdx.ExportPalette(string, int)', object 'Local2' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local2' before all references to it are out of scope.</Issue>
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'AnimIdx.ExportPalette(string, int)', object 'Local9' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local9' before all references to it are out of scope.</Issue>
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'AnimIdx.ExportPalette(string, int)', object 'new Bitmap(Local2)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new Bitmap(Local2)' before all references to it are out of scope.</Issue>
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'AnimIdx.ExportPalette(string, int)', object 'new Bitmap(Local9)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new Bitmap(Local9)' before all references to it are out of scope.</Issue>
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'AnimIdx.ExportPalette(string, int)', object 'new FileStream(filename, FileMode.Create, FileAccess.ReadWrite)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new FileStream(filename, FileMode.Create, FileAccess.ReadWrite)' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExportToVD(System.IO.BinaryWriter,System.Int64&amp;,System.Int64&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'indexpos' be a reference parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'animpos' be a reference parameter.</Issue>
            </Message>
            <Message Id="animpos" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'AnimIdx.ExportToVD(BinaryWriter, ref long, ref long)', correct the spelling of 'animpos' in parameter name 'animpos' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="indexpos" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'AnimIdx.ExportToVD(BinaryWriter, ref long, ref long)', correct the spelling of 'indexpos' in parameter name 'indexpos' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'AnimIdx.ExportToVD(BinaryWriter, ref long, ref long)', validate parameter 'bin' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Frames" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;FrameEdit&gt;' in 'AnimIdx.Frames' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="SameType" Certainty="95" Level="Error">The property name 'AnimIdx.Frames' is confusing given the existence of method 'AnimIdx.GetFrames()'. Rename or remove one of these members.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFrames()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'AnimIdx.GetFrames()', object 'Local5' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local5' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetImagePalette(System.Drawing.Bitmap)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error">Consider changing the type of parameter 'bit' in 'AnimIdx.GetImagePalette(Bitmap)' from 'Bitmap' to its base type 'Image'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning">In method 'AnimIdx.GetImagePalette(Bitmap)', call System.IDisposable.Dispose on object 'Local1' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#idxextra" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AnimIdx.idxextra' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="idxextra" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'idxextra' in member name 'AnimIdx.idxextra' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Palette" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'AnimIdx.Palette' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaletteConversor(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Conversor" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Conversor' in member name 'AnimIdx.PaletteConversor(int)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="seletor" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'AnimIdx.PaletteConversor(int)', correct the spelling of 'seletor' in parameter name 'seletor' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="seletor-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning">Correct the potential overflow in the operation 'seletor-1' in 'AnimIdx.PaletteConversor(int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaletteReductor(System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Bluep" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'AnimIdx.PaletteReductor(int, int, int)', correct the casing of 'Bluep' in parameter name 'Bluep' by changing it to 'bluep'.</Issue>
            </Message>
            <Message Id="Greenp" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'AnimIdx.PaletteReductor(int, int, int)', correct the casing of 'Greenp' in parameter name 'Greenp' by changing it to 'greenp'.</Issue>
            </Message>
            <Message Id="Redp" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'AnimIdx.PaletteReductor(int, int, int)', correct the casing of 'Redp' in parameter name 'Redp' by changing it to 'redp'.</Issue>
            </Message>
            <Message Id="Bluep" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'AnimIdx.PaletteReductor(int, int, int)', correct the spelling of 'Bluep' in parameter name 'Bluep' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Greenp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'AnimIdx.PaletteReductor(int, int, int)', correct the spelling of 'Greenp' in parameter name 'Greenp' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Redp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'AnimIdx.PaletteReductor(int, int, int)', correct the spelling of 'Redp' in parameter name 'Redp' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Reductor" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Reductor' in member name 'AnimIdx.PaletteReductor(int, int, int)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.IO.BinaryWriter,System.IO.BinaryWriter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="idx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'AnimIdx.Save(BinaryWriter, BinaryWriter)', correct the spelling of 'idx' in parameter name 'idx' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'AnimIdx.Save(BinaryWriter, BinaryWriter)', validate parameter 'bin' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'AnimIdx.Save(BinaryWriter, BinaryWriter)', validate parameter 'idx' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Art" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'Art' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning">Initialize all static fields in 'Art' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetIdxLength()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Idx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Idx' in member name 'Art.GetIdxLength()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'Art.GetIdxLength()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLand(System.Int32,System.Boolean&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'patched' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLegalItemID(System.Int32,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Replace method 'Art.GetLegalItemID(int, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'ID' in member name 'Art.GetLegalItemID(int, bool)' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error">In member 'Art.GetLegalItemID(int, bool)', correct the casing of 'ID' in parameter name 'itemID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="checkmaxid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Art.GetLegalItemID(int, bool)', correct the spelling of 'checkmaxid' in parameter name 'checkmaxid' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMaxItemID()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'ID' in member name 'Art.GetMaxItemID()' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'Art.GetMaxItemID()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRawStatic(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="index+16384" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning">Correct the potential overflow in the operation 'index+16384' in 'Art.GetRawStatic(int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStatic(System.Int32,System.Boolean&amp;,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'patched' be an out parameter.</Issue>
            </Message>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Replace method 'Art.GetStatic(int, out bool, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="checkmaxid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Art.GetStatic(int, out bool, bool)', correct the spelling of 'checkmaxid' in parameter name 'checkmaxid' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="index+16384" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning">Correct the potential overflow in the operation 'index+16384' in 'Art.GetStatic(int, out bool, bool)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStatic(System.Int32,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Replace method 'Art.GetStatic(int, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="checkmaxid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Art.GetStatic(int, bool)', correct the spelling of 'checkmaxid' in parameter name 'checkmaxid' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsUOAHS()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UOAHS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'UOAHS' in member name 'Art.IsUOAHS()' by changing it to 'Uoahs'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsValidStatic(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="index+16384" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning">Correct the potential overflow in the operation 'index+16384' in 'Art.IsValidStatic(int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadLand(System.IO.Stream,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Art.LoadLand(Stream, int)', object 'Local0' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local0' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadStatic(System.IO.Stream,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Art.LoadStatic(Stream, int)', object 'Local0' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local0' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Cache" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Art.m_Cache' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_FileIndex" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Art.m_FileIndex' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_patched" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Art.m_patched' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Removed" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Art.m_Removed' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_StreamBuffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Art.m_StreamBuffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Measure(System.Drawing.Bitmap,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'xMin' be an out parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'yMin' be an out parameter.</Issue>
            </Message>
            <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'xMax' be an out parameter.</Issue>
            </Message>
            <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'yMax' be an out parameter.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Art.Measure(Bitmap, out int, out int, out int, out int)', correct the spelling of 'x' in parameter name 'xMax' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Art.Measure(Bitmap, out int, out int, out int, out int)', correct the spelling of 'x' in parameter name 'xMin' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Art.Measure(Bitmap, out int, out int, out int, out int)', correct the spelling of 'y' in parameter name 'yMax' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Art.Measure(Bitmap, out int, out int, out int, out int)', correct the spelling of 'y' in parameter name 'yMin' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Modified" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Art.Modified' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveStatic(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="index+16384" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning">Correct the potential overflow in the operation 'index+16384' in 'Art.RemoveStatic(int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReplaceStatic(System.Int32,System.Drawing.Bitmap)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="index+16384" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning">Correct the potential overflow in the operation 'index+16384' in 'Art.ReplaceStatic(int, Bitmap)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning">'Art.Save(string)' has a cyclomatic complexity of 27. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning">In method 'Art.Save(string)', call System.IDisposable.Dispose on object 'Local10' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning">In method 'Art.Save(string)', call System.IDisposable.Dispose on object 'Local29' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning">In method 'Art.Save(string)', call System.IDisposable.Dispose on object 'Local5' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ASCIIFont" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="ASCII" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'ASCII' in type name 'ASCIIFont' by changing it to 'Ascii'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Characters" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'ASCIIFont.Characters' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReplaceCharacter(System.Int32,System.Drawing.Bitmap)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'ASCIIFont.ReplaceCharacter(int, Bitmap)', validate parameter 'import' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Unk" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Unk' in member name 'ASCIIFont.Unk' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'ASCIIFont.Unk' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ASCIIText" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="ASCII" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'ASCII' in type name 'ASCIIText' by changing it to 'Ascii'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning">Initialize all static fields in 'ASCIIText' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DrawText(System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'ASCIIText.DrawText(int, string)', object 'Local1' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local1' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'ASCIIText.DrawText(int, string)', validate parameter 'text' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fonts" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ASCIIText.Fonts' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Initialize()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'ASCIIText.Initialize()', object 'Local12' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local12' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local0' can be disposed more than once in method 'ASCIIText.Save(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'ASCIIText.Save(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BodyConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Convert(System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'body' be a reference parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTrueBody(System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'BodyConverter.GetTrueBody(int, int)', correct the casing of 'File' in parameter name 'FileType' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="FileType-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning">Correct the potential overflow in the operation 'FileType-1' in 'BodyConverter.GetTrueBody(int, int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Initialize()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning">'BodyConverter.Initialize()' has a cyclomatic complexity of 27. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'BodyConverter.Initialize()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'BodyConverter.Initialize()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'BodyConverter.Initialize()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError">Modify 'BodyConverter.Initialize()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'BodyConverter.Initialize()' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'BodyConverter.Initialize()' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'BodyConverter.Initialize()' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'BodyConverter.Initialize()' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'BodyConverter.Initialize()' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'BodyConverter.Initialize()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Table1" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'BodyConverter.Table1' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Table2" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'BodyConverter.Table2' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Table3" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'BodyConverter.Table3' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Table4" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'BodyConverter.Table4' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BodyTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'BodyTable' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Initialize()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'BodyTable.Initialize()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'BodyTable.Initialize()' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'BodyTable.Initialize()' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'BodyTable.Initialize()' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'BodyTable.Initialize()' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'BodyTable.Initialize()' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'BodyTable.Initialize()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Entries" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'BodyTable.m_Entries' non-public or a constant.</Issue>
            </Message>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'BodyTable.m_Entries' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BodyTableEntry" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error">In member 'BodyTableEntry.BodyTableEntry(int, int, int)', correct the casing of 'ID' in parameter name 'newID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error">In member 'BodyTableEntry.BodyTableEntry(int, int, int)', correct the casing of 'ID' in parameter name 'oldID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NewID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'ID' in member name 'BodyTableEntry.NewID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OldID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'ID' in member name 'BodyTableEntry.OldID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CalibrationInfo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="detf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'CalibrationInfo.CalibrationInfo(byte[], byte[], byte[], byte[], byte[], byte[])', correct the spelling of 'detf' in parameter name 'detf' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="detx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'CalibrationInfo.CalibrationInfo(byte[], byte[], byte[], byte[], byte[], byte[])', correct the spelling of 'detx' in parameter name 'detx' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="dety" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'CalibrationInfo.CalibrationInfo(byte[], byte[], byte[], byte[], byte[], byte[])', correct the spelling of 'dety' in parameter name 'dety' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="detz" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'CalibrationInfo.CalibrationInfo(byte[], byte[], byte[], byte[], byte[], byte[])', correct the spelling of 'detz' in parameter name 'detz' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="vals" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'CalibrationInfo.CalibrationInfo(byte[], byte[], byte[], byte[], byte[], byte[])', correct the spelling of 'vals' in parameter name 'vals' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DefaultList" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'CalibrationInfo.DefaultList' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DetF" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Det" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Det' in member name 'CalibrationInfo.DetF' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'CalibrationInfo.DetF' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DetX" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Det" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Det' in member name 'CalibrationInfo.DetX' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'CalibrationInfo.DetX' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DetY" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Det" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Det' in member name 'CalibrationInfo.DetY' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'CalibrationInfo.DetY' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DetZ" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Det" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Det' in member name 'CalibrationInfo.DetZ' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'CalibrationInfo.DetZ' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_DefaultList" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'CalibrationInfo.m_DefaultList' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Mask" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'CalibrationInfo.Mask' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Vals" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Vals" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vals' in member name 'CalibrationInfo.Vals' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'CalibrationInfo.Vals' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Client" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BringToTop()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Ultima.NativeMethods.SetForegroundWindow(Ultima.ClientWindowHandle)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning">'Client.BringToTop()' calls 'NativeMethods.SetForegroundWindow(ClientWindowHandle)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Calibrate(System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Client.Calibrate(int, int, int)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Client.Calibrate(int, int, int)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Client.Calibrate(int, int, int)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Calibrate(Ultima.CalibrationInfo[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Client.Calibrate(CalibrationInfo[])', validate parameter 'info' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindLocation(System.Int32&amp;,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'x' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'y' be a reference parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'z' be a reference parameter.</Issue>
            </Message>
            <Message Id="3#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'facet' be a reference parameter.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Client.FindLocation(ref int, ref int, ref int, ref int)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Client.FindLocation(ref int, ref int, ref int, ref int)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Client.FindLocation(ref int, ref int, ref int, ref int)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Is_Iris2" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'Client.Is_Iris2'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Handle" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Client.m_Handle' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Is_Iris2" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Client.m_Is_Iris2' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_LocationPointer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Client.m_LocationPointer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_ProcStream" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Client.m_ProcStream' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Read(Ultima.ProcessStream,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error">Consider changing the type of parameter 'pc' in 'Client.Read(ProcessStream, int)' from 'ProcessStream' to its base type 'Stream'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="bytes-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning">Correct the potential overflow in the operation 'bytes-1' in 'Client.Read(ProcessStream, int)'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Client.Read(ProcessStream, int)', validate parameter 'pc' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Search(Ultima.ProcessStream,System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Client.Search(ProcessStream, byte[])', validate parameter 'pc' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Client.Search(ProcessStream, byte[])', validate parameter 'buffer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Search(Ultima.ProcessStream,System.Byte[],System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error">'Client.Search(ProcessStream, byte[], byte[])' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="vals" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Client.Search(ProcessStream, byte[], byte[])', correct the spelling of 'vals' in parameter name 'vals' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Client.Search(ProcessStream, byte[], byte[])', validate parameter 'pc' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Client.Search(ProcessStream, byte[], byte[])', validate parameter 'mask' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Client.Search(ProcessStream, byte[], byte[])', validate parameter 'vals' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendText(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Client.SendText(string)', validate parameter 'text' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendText(System.String,System.Object[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'Client.SendText(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ClientProcessHandle" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ComVisibleTypeBaseTypesShouldBeComVisible" Category="Microsoft.Interoperability" CheckId="CA1405" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
           <Issue Certainty="90" Level="Error">'ClientProcessHandle' is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: 'CriticalHandleZeroOrMinusOneIsInvalid', 'CriticalHandle'</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Invalid" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ClientProcessHandle.Invalid' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ClientWindowHandle" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ComVisibleTypeBaseTypesShouldBeComVisible" Category="Microsoft.Interoperability" CheckId="CA1405" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
           <Issue Certainty="90" Level="Error">'ClientWindowHandle' is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: 'CriticalHandleZeroOrMinusOneIsInvalid', 'CriticalHandle'</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Invalid" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'ClientWindowHandle.Invalid' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Entry3D" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'Entry3D' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'Entry3D' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#extra" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Entry3D.extra' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#length" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Entry3D.length' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#lookup" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Entry3D.lookup' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Entry5D" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'Entry5D' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'Entry5D' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#extra" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Entry5D.extra' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#file" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Entry5D.file' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#index" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Entry5D.index' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#length" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Entry5D.length' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#lookup" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Entry5D.lookup' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FileIndex" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="idx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'FileIndex.FileIndex(string, string, int)', correct the spelling of 'idx' in parameter name 'idxFile' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="mul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'FileIndex.FileIndex(string, string, int)', correct the spelling of 'mul' in parameter name 'mulFile' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'FileIndex.FileIndex(string, string, int)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'FileIndex.FileIndex(string, string, int)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'FileIndex.FileIndex(string, string, int)', validate parameter 'idxFile' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'FileIndex.FileIndex(string, string, int)', validate parameter 'mulFile' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.String,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="idx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'FileIndex.FileIndex(string, string, int, int)', correct the spelling of 'idx' in parameter name 'idxFile' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="mul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'FileIndex.FileIndex(string, string, int, int)', correct the spelling of 'mul' in parameter name 'mulFile' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning">'FileIndex.FileIndex(string, string, string, int, int, string, int, bool)' has a cyclomatic complexity of 39. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Reserved" Certainty="95" Level="Error">'FileIndex.FileIndex(string, string, string, int, int, string, int, bool)' creates an exception of type 'IndexOutOfRangeException', an exception type that is reserved by the runtime and should never be raised by managed code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="idx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'FileIndex.FileIndex(string, string, string, int, int, string, int, bool)', correct the spelling of 'idx' in parameter name 'idxFile' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'FileIndex.FileIndex(string, string, string, int, int, string, int, bool)', correct the spelling of 'idx' in parameter name 'idxLength' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="mul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'FileIndex.FileIndex(string, string, string, int, int, string, int, bool)', correct the spelling of 'mul' in parameter name 'mulFile' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="uop" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'FileIndex.FileIndex(string, string, string, int, int, string, int, bool)', correct the spelling of 'uop' in parameter name 'uopEntryExtension' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'FileIndex.FileIndex(string, string, string, int, int, string, int, bool)', correct the spelling of 'uop' in parameter name 'uopFile' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error">In method 'FileIndex.FileIndex(string, string, string, int, int, string, int, bool)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'FileIndex.FileIndex(string, string, string, int, int, string, int, bool)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'FileIndex.FileIndex(string, string, string, int, int, string, int, bool)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'FileIndex.FileIndex(string, string, string, int, int, string, int, bool)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'FileIndex.FileIndex(string, string, string, int, int, string, int, bool)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'FileIndex.FileIndex(string, string, string, int, int, string, int, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'FileIndex.FileIndex(string, string, string, int, int, string, int, bool)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'FileIndex.FileIndex(string, string, string, int, int, string, int, bool)', validate parameter 'idxFile' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'FileIndex.FileIndex(string, string, string, int, int, string, int, bool)', validate parameter 'mulFile' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HashFileName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'FileIndex.HashFileName(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'FileIndex.HashFileName(string)', validate parameter 's' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IdxLength" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Idx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Idx' in member name 'FileIndex.IdxLength' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Index" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'FileIndex.Index' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Seek(System.Int32,System.Int32&amp;,System.Int32&amp;,System.Boolean&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'length' be an out parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'extra' be an out parameter.</Issue>
            </Message>
            <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'patched' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Valid(System.Int32,System.Int32&amp;,System.Int32&amp;,System.Boolean&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'length' be an out parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'extra' be an out parameter.</Issue>
            </Message>
            <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'patched' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Files" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'Files' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning">Initialize all static fields in 'Files' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompareHashFile(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning">In method 'Files.CompareHashFile(string, string)', call System.IDisposable.Dispose on object 'new FileStream(Local0, FileMode.Open, FileAccess.Read, FileShare.Read)' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'Files.CompareHashFile(string, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Files.CompareHashFile(string, string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Files.CompareHashFile(string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Files.CompareHashFile(string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompareMD5(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Files.CompareMD5(string, string)', object 'Local0' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local0' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Files.CompareMD5(string, string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FireFileSaveEvent()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">Consider making 'Files.FireFileSaveEvent()' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFilePath(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Files.GetFilePath(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Files.GetFilePath(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Files.GetFilePath(string)', validate parameter 'file' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFilePath(System.String,System.Object[])" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'Files.GetFilePath(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMD5(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Files.GetMD5(string)', object 'Local0' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local0' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPath(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'Files.GetPath(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Files.GetPath(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Files.GetPath(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadDirectory()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Files.LoadDirectory()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadMulPath()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Mul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Mul' in member name 'Files.LoadMulPath()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_CacheData" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Files.m_CacheData' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Directory" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Files.m_Directory' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Files" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Files.m_Files' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_MulPath" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Files.m_MulPath' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_RootDir" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Files.m_RootDir' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MulPath" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'Files.MulPath' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message Id="Mul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Mul' in member name 'Files.MulPath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReLoadDirectory()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ReLoad" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'ReLoad' in member name 'Files.ReLoadDirectory()' exists as a discrete term. If your usage is intended to be single word, case it as 'Reload' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Re" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'Re' in member name 'Files.ReLoadDirectory()' by changing it to 'RE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RootDir" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dir' in member name 'Files.RootDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetMulPath(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Mul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Mul' in member name 'Files.SetMulPath(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetMulPath(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Mul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Mul' in member name 'Files.SetMulPath(string, string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FileSaveEvent" Kind="Event" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'Files.FileSaveHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'Files.FileSaveHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'Files.FileSaveHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Files+FileSaveHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Files.FileSaveHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Frame" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.UInt16[],System.IO.BinaryReader,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Frame.Frame(ushort[], BinaryReader, bool)', object 'Local4' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local4' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Frame.Frame(ushort[], BinaryReader, bool)', validate parameter 'palette' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Frame.Frame(ushort[], BinaryReader, bool)', validate parameter 'bin' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Empty" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'Frame.Empty' or change the field to one that is an immutable reference type. If the reference type 'Frame' is, in fact, immutable, exclude this message.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FrameEdit" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Drawing.Bitmap,System.UInt16[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="centerx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'FrameEdit.FrameEdit(Bitmap, ushort[], int, int)', correct the spelling of 'centerx' in parameter name 'centerx' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="centery" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'FrameEdit.FrameEdit(Bitmap, ushort[], int, int)', correct the spelling of 'centery' in parameter name 'centery' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'FrameEdit.FrameEdit(Bitmap, ushort[], int, int)', validate parameter 'bit' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.IO.BinaryReader)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'FrameEdit.FrameEdit(BinaryReader)', validate parameter 'bin' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ChangeCenter(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'FrameEdit.ChangeCenter(int, int)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'FrameEdit.ChangeCenter(int, int)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#height" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'FrameEdit.height' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RawData" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'FrameEdit.RawData' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.IO.BinaryWriter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'FrameEdit.Save(BinaryWriter)', validate parameter 'bin' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#width" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'FrameEdit.width' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FrameEdit+Raw" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'FrameEdit.Raw'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'FrameEdit.Raw' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'FrameEdit.Raw' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#data" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'FrameEdit.Raw.data' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#offx" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'FrameEdit.Raw.offx' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="offx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'offx' in member name 'FrameEdit.Raw.offx' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#offy" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'FrameEdit.Raw.offy' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="offy" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'offy' in member name 'FrameEdit.Raw.offy' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#run" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'FrameEdit.Raw.run' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Gumps" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Gumps" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Gumps' in type name 'Gumps'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'Gumps' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning">Initialize all static fields in 'Gumps' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCount()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'Gumps.GetCount()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetGump(System.Int32,System.Boolean&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'patched' be an out parameter.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Gumps.GetGump(int, out bool)', object 'Local5' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local5' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetGump(System.Int32,Ultima.Hue,System.Boolean,System.Boolean&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning">'Gumps.GetGump(int, Hue, bool, out bool)' has a cyclomatic complexity of 31. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'patched' be an out parameter.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Gumps.GetGump(int, Hue, bool, out bool)', validate parameter 'hue' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRawGump(System.Int32,System.Int32&amp;,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'width' be an out parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'height' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Cache" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Gumps.m_Cache' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_ColorTable" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Gumps.m_ColorTable' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_FileIndex" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Gumps.m_FileIndex' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_patched" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Gumps.m_patched' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_PixelBuffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Gumps.m_PixelBuffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Removed" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Gumps.m_Removed' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_StreamBuffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Gumps.m_StreamBuffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Reload()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'Gumps.Reload()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local1' can be disposed more than once in method 'Gumps.Save(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
             <Issue Certainty="75" Level="Warning">Object 'Local2' can be disposed more than once in method 'Gumps.Save(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Hue" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Int32,System.IO.BinaryReader)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Hue.Hue(int, BinaryReader)', validate parameter 'bin' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Int32,Ultima.HueDataMul)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="mulstruct" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Hue.Hue(int, HueDataMul)', correct the spelling of 'mulstruct' in parameter name 'mulstruct' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ApplyTo(System.Drawing.Bitmap,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Hue.ApplyTo(Bitmap, bool)', validate parameter 'bmp' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Colors" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'Hue.Colors' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Export(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Hue.Export(string)', object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'Hue.Export(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="System.Int16.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'short.ToString()' could vary based on the current user's locale settings, replace this call in 'Hue.Export(string)' with a call to 'short.ToString(IFormatProvider)'. If the result of 'short.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'short.ToString()' could vary based on the current user's locale settings, replace this call in 'Hue.Export(string)' with a call to 'short.ToString(IFormatProvider)'. If the result of 'short.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'short.ToString()' could vary based on the current user's locale settings, replace this call in 'Hue.Export(string)' with a call to 'short.ToString(IFormatProvider)'. If the result of 'short.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Import(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'Hue.Import(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'Hue.Import(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="System.UInt16.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'ushort.Parse(string)' could vary based on the current user's locale settings, replace this call in 'Hue.Import(string)' with a call to 'ushort.Parse(string, IFormatProvider)'. If the result of 'ushort.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'ushort.Parse(string)' could vary based on the current user's locale settings, replace this call in 'Hue.Import(string)' with a call to 'ushort.Parse(string, IFormatProvider)'. If the result of 'ushort.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'ushort.Parse(string)' could vary based on the current user's locale settings, replace this call in 'Hue.Import(string)' with a call to 'ushort.Parse(string, IFormatProvider)'. If the result of 'ushort.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Buffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Hue.m_Buffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_StringBuffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Hue.m_StringBuffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HueDataMul" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Mul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Mul' in type name 'HueDataMul'.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'HueDataMul' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'HueDataMul' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#colors" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HueDataMul.colors' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#name" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HueDataMul.name' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#tableend" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HueDataMul.tableend' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="tableend" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'tableend' in member name 'HueDataMul.tableend' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#tablestart" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HueDataMul.tablestart' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="tablestart" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'tablestart' in member name 'HueDataMul.tablestart' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HuedTile" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'HuedTile' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'HuedTile' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.UInt16,System.Int16,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'HuedTile.HuedTile(ushort, short, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'ID' in member name 'HuedTile.ID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set(System.UInt16,System.Int16,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'HuedTile.Set(ushort, short, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Z" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than member name 'HuedTile.Z'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HuedTileList" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Add(System.UInt16,System.Int16,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'HuedTileList.Add(ushort, short, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Hues" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'Hues' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ApplyTo(System.Drawing.Bitmap,System.Int16[],System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Colors" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'Hues.ApplyTo(Bitmap, short[], bool)', correct the casing of 'Colors' in parameter name 'Colors' by changing it to 'colors'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Hues.ApplyTo(Bitmap, short[], bool)', validate parameter 'bmp' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Hues.ApplyTo(Bitmap, short[], bool)', validate parameter 'Colors' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ColorToHue(System.Drawing.Color)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Hues.ColorToHue(Color)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#List" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'Hues.List' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Header" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Hues.m_Header' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local0' can be disposed more than once in method 'Hues.Save(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ItemData" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'ItemData' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'ItemData' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,Ultima.TileFlag,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Misc" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'ItemData.ItemData(string, TileFlag, int, int, int, int, int, int, int, int, int, int, int, int)', correct the casing of 'Misc' in parameter name 'MiscData' by changing it to 'misc'.</Issue>
            </Message>
            <Message Id="anim" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'ItemData.ItemData(string, TileFlag, int, int, int, int, int, int, int, int, int, int, int, int)', correct the spelling of 'anim' in parameter name 'anim' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="stackingoffset" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'ItemData.ItemData(string, TileFlag, int, int, int, int, int, int, int, int, int, int, int, int)', correct the spelling of 'stackingoffset' in parameter name 'stackingoffset' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'ItemData.ItemData(string, TileFlag, int, int, int, int, int, int, int, int, int, int, int, int)', correct the spelling of 'unk' in parameter name 'unk1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'ItemData.ItemData(string, TileFlag, int, int, int, int, int, int, int, int, int, int, int, int)', correct the spelling of 'unk' in parameter name 'unk2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'ItemData.ItemData(string, TileFlag, int, int, int, int, int, int, int, int, int, int, int, int)', correct the spelling of 'unk' in parameter name 'unk3' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error">In member 'ItemData.ItemData(string, TileFlag, int, int, int, int, int, int, int, int, int, int, int, int)', replace the term 'flags' in parameter name 'flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(Ultima.NewItemTileDataMul)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="mulstruct" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'ItemData.ItemData(NewItemTileDataMul)', correct the spelling of 'mulstruct' in parameter name 'mulstruct' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(Ultima.OldItemTileDataMul)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="mulstruct" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'ItemData.ItemData(OldItemTileDataMul)', correct the spelling of 'mulstruct' in parameter name 'mulstruct' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CalcHeight" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Calc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Calc' in member name 'ItemData.CalcHeight' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Flags" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'Flags' in member name 'ItemData.Flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadData(System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning">'ItemData.ReadData(string[])' has a cyclomatic complexity of 33. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="System.Convert.ToByte(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt16(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt16(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToInt16(string, IFormatProvider)'. If the result of 'Convert.ToInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'ItemData.ReadData(string[])' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'ItemData.ReadData(string[])', validate parameter 'split' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Unk1" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Unk' in member name 'ItemData.Unk1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Unk2" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Unk' in member name 'ItemData.Unk2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Unk3" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Unk' in member name 'ItemData.Unk3' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LandData" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'LandData' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'LandData' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Int32,Ultima.TileFlag,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error">In member 'LandData.LandData(string, int, TileFlag, int)', correct the casing of 'ID' in parameter name 'TexID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Tex" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'LandData.LandData(string, int, TileFlag, int)', correct the casing of 'Tex' in parameter name 'TexID' by changing it to 'tex'.</Issue>
            </Message>
            <Message Id="unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'LandData.LandData(string, int, TileFlag, int)', correct the spelling of 'unk' in parameter name 'unk1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error">In member 'LandData.LandData(string, int, TileFlag, int)', replace the term 'flags' in parameter name 'flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(Ultima.NewLandTileDataMul)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="mulstruct" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'LandData.LandData(NewLandTileDataMul)', correct the spelling of 'mulstruct' in parameter name 'mulstruct' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(Ultima.OldLandTileDataMul)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="mulstruct" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'LandData.LandData(OldLandTileDataMul)', correct the spelling of 'mulstruct' in parameter name 'mulstruct' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Flags" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'Flags' in member name 'LandData.Flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadData(System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning">'LandData.ReadData(string[])' has a cyclomatic complexity of 33. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="System.Convert.ToByte(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'LandData.ReadData(string[])' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'LandData.ReadData(string[])', validate parameter 'split' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TextureID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'ID' in member name 'LandData.TextureID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Unk1" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Unk' in member name 'LandData.Unk1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Light" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'Light' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetCount()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'Light.GetCount()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLight(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Light.GetLight(int)', object 'Local6' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local6' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRawLight(System.Int32,System.Int32&amp;,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'width' be an out parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'height' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Cache" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Light.m_Cache' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_FileIndex" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Light.m_FileIndex' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Removed" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Light.m_Removed' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_StreamBuffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Light.m_StreamBuffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local1' can be disposed more than once in method 'Light.Save(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
             <Issue Certainty="75" Level="Warning">Object 'Local2' can be disposed more than once in method 'Light.Save(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LocationPointer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ptr" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'LocationPointer.LocationPointer(int, int, int, int, int, int, int, int)', consider replacing the data type identifier 'ptr' in parameter name 'ptrF' with a more generic term, such as 'value'.</Issue>
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'LocationPointer.LocationPointer(int, int, int, int, int, int, int, int)', consider replacing the data type identifier 'ptr' in parameter name 'ptrX' with a more generic term, such as 'value'.</Issue>
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'LocationPointer.LocationPointer(int, int, int, int, int, int, int, int)', consider replacing the data type identifier 'ptr' in parameter name 'ptrY' with a more generic term, such as 'value'.</Issue>
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'LocationPointer.LocationPointer(int, int, int, int, int, int, int, int)', consider replacing the data type identifier 'ptr' in parameter name 'ptrZ' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Map" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error">In member 'Map.Map(int, int, int, int)', correct the casing of 'ID' in parameter name 'mapID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error">In member 'Map.Map(string, int, int, int, int)', correct the casing of 'ID' in parameter name 'mapID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Custom" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Map.Custom' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DefragStatics(System.String,Ultima.Map,System.Int32,System.Int32,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning">'Map.DefragStatics(string, Map, int, int, bool)' has a cyclomatic complexity of 57. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Method" Certainty="75" Level="Warning">'Map.DefragStatics(string, Map, int, int, bool)' has a maintainability index of 19. Rewrite or refactor the method to increase its maintainability index (MI). An MI below 10 indicates poor maintainability, an MI between 10 and 20 indicates moderate maintainability, and an MI above 20 indicates good maintainability.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Map.DefragStatics(string, Map, int, int, bool)', object 'Local10' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local10' before all references to it are out of scope.</Issue>
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Map.DefragStatics(string, Map, int, int, bool)', object 'Local11' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local11' before all references to it are out of scope.</Issue>
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Map.DefragStatics(string, Map, int, int, bool)', object 'Local3' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local3' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning">In method 'Map.DefragStatics(string, Map, int, int, bool)', call System.IDisposable.Dispose on object 'new FileStream(Local0, FileMode.Open, FileAccess.Read, FileShare.Read)' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'Map.DefragStatics(string, Map, int, int, bool)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Map.DefragStatics(string, Map, int, int, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Map.DefragStatics(string, Map, int, int, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Map.DefragStatics(string, Map, int, int, bool)', validate parameter 'map' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Felucca" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Map.Felucca' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetImage(System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Map.GetImage(int, int, int, int)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Map.GetImage(int, int, int, int)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetImage(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Map.GetImage(int, int, int, int, bool)', object 'Local0' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local0' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Map.GetImage(int, int, int, int, bool)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Map.GetImage(int, int, int, int, bool)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetImage(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Bitmap)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Map.GetImage(int, int, int, int, Bitmap)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Map.GetImage(int, int, int, int, Bitmap)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetImage(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Bitmap,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Map.GetImage(int, int, int, int, Bitmap, bool)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Map.GetImage(int, int, int, int, Bitmap, bool)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
            <Message Id="4" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Map.GetImage(int, int, int, int, Bitmap, bool)', validate parameter 'bmp' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Ilshenar" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'Map.Ilshenar' or change the field to one that is an immutable reference type. If the reference type 'Map' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message Id="Ilshenar" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ilshenar' in member name 'Map.Ilshenar' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_UseDiff" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Map.m_UseDiff' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Malas" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'Map.Malas' or change the field to one that is an immutable reference type. If the reference type 'Map' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message Id="Malas" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Malas' in member name 'Map.Malas' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PreloadRenderedBlock(System.Int32,System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Map.PreloadRenderedBlock(int, int, bool)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Map.PreloadRenderedBlock(int, int, bool)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RenderBlock(System.Int32,System.Int32,System.Boolean,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning">'Map.RenderBlock(int, int, bool, bool)' has a cyclomatic complexity of 32. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'Map.RenderBlock(int, int, bool, bool)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReportInvalidMapIDs(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Map.ReportInvalidMapIDs(string)', object 'new FileStream(reportfile, FileMode.Create, FileAccess.ReadWrite)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new FileStream(reportfile, FileMode.Create, FileAccess.ReadWrite)' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="IDs" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'IDs' in member name 'Map.ReportInvalidMapIDs(string)' by changing it to 'Ids'. 'Ids' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="reportfile" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Map.ReportInvalidMapIDs(string)', correct the spelling of 'reportfile' in parameter name 'reportfile' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Map.ReportInvalidMapIDs(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'Map.ReportInvalidMapIDs(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'Map.ReportInvalidMapIDs(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReportInvisStatics(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Map.ReportInvisStatics(string)', object 'new FileStream(reportfile, FileMode.Create, FileAccess.ReadWrite)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new FileStream(reportfile, FileMode.Create, FileAccess.ReadWrite)' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="Invis" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Invis' in member name 'Map.ReportInvisStatics(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="reportfile" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Map.ReportInvisStatics(string)', correct the spelling of 'reportfile' in parameter name 'reportfile' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Map.ReportInvisStatics(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'Map.ReportInvisStatics(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RewriteMap(System.String,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Map.RewriteMap(string, int, int, int)', object 'Local5' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local5' before all references to it are out of scope.</Issue>
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Map.RewriteMap(string, int, int, int)', object 'new FileStream(Local0, FileMode.Open, FileAccess.Read, FileShare.Read)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new FileStream(Local0, FileMode.Open, FileAccess.Read, FileShare.Read)' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'Map.RewriteMap(string, int, int, int)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Map.RewriteMap(string, int, int, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StartUpSetDiff(System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="StartUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'StartUp' in member name 'Map.StartUpSetDiff(bool)' exists as a discrete term. If your usage is intended to be single word, case it as 'Startup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="UpSet" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'UpSet' in member name 'Map.StartUpSetDiff(bool)' exists as a discrete term. If your usage is intended to be single word, case it as 'Upset' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TerMur" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'Map.TerMur' or change the field to one that is an immutable reference type. If the reference type 'Map' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message Id="Ter" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ter' in member name 'Map.TerMur' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Tokuno" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'Map.Tokuno' or change the field to one that is an immutable reference type. If the reference type 'Map' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message Id="Tokuno" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Tokuno' in member name 'Map.Tokuno' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Trammel" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Map.Trammel' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MTile" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'MTile' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'MTile' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
          <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Error">'MTile' should override Equals since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'MTile' should define operator '!=' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'MTile' should define operator '&lt;' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'MTile' should define operator '==' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'MTile' should define operator '&gt;' since it implements IComparable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.UInt16,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTile.MTile(ushort, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.UInt16,System.SByte,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTile.MTile(ushort, sbyte, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
            <Message Id="flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error">In member 'MTile.MTile(ushort, sbyte, sbyte)', replace the term 'flag' in parameter name 'flag' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.UInt16,System.SByte,System.SByte,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MTile.MTile(ushort, sbyte, sbyte, int)', correct the spelling of 'unk' in parameter name 'unk1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTile.MTile(ushort, sbyte, sbyte, int)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
            <Message Id="flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error">In member 'MTile.MTile(ushort, sbyte, sbyte, int)', replace the term 'flag' in parameter name 'flag' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError">Call the 'ArgumentNullException' constructor that contains a message and/or paramName parameter.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">In member 'MTile.CompareTo(object)', change parameter name 'x' to 'obj' in order to match the identifier as it has been declared in 'IComparable.CompareTo(object)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Flag" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'Flag' in member name 'MTile.Flag' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'ID' in member name 'MTile.ID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set(System.UInt16,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTile.Set(ushort, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set(System.UInt16,System.SByte,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTile.Set(ushort, sbyte, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
            <Message Id="flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error">In member 'MTile.Set(ushort, sbyte, sbyte)', replace the term 'flag' in parameter name 'flag' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set(System.UInt16,System.SByte,System.SByte,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MTile.Set(ushort, sbyte, sbyte, int)', correct the spelling of 'unk' in parameter name 'unk1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTile.Set(ushort, sbyte, sbyte, int)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
            <Message Id="flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error">In member 'MTile.Set(ushort, sbyte, sbyte, int)', replace the term 'flag' in parameter name 'flag' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Unk1" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Unk' in member name 'MTile.Unk1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Z" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than member name 'MTile.Z'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MTileList" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Add(System.UInt16,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTileList.Add(ushort, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Add(System.UInt16,System.SByte,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTileList.Add(ushort, sbyte, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
            <Message Id="flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error">In member 'MTileList.Add(ushort, sbyte, sbyte)', replace the term 'flag' in parameter name 'flag' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Add(System.UInt16,System.SByte,System.SByte,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MTileList.Add(ushort, sbyte, sbyte, int)', correct the spelling of 'unk' in parameter name 'unk1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTileList.Add(ushort, sbyte, sbyte, int)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
            <Message Id="flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error">In member 'MTileList.Add(ushort, sbyte, sbyte, int)', replace the term 'flag' in parameter name 'flag' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTileList.Get(int)', consider providing a more meaningful name than parameter name 'i'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTileList.Remove(int)', consider providing a more meaningful name than parameter name 'i'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set(System.Int32,System.UInt16,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTileList.Set(int, ushort, sbyte)', consider providing a more meaningful name than parameter name 'i'.</Issue>
            </Message>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTileList.Set(int, ushort, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set(System.Int32,System.UInt16,System.SByte,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTileList.Set(int, ushort, sbyte, sbyte)', consider providing a more meaningful name than parameter name 'i'.</Issue>
            </Message>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTileList.Set(int, ushort, sbyte, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
            <Message Id="flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error">In member 'MTileList.Set(int, ushort, sbyte, sbyte)', replace the term 'flag' in parameter name 'flag' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set(System.Int32,System.UInt16,System.SByte,System.SByte,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTileList.Set(int, ushort, sbyte, sbyte, int)', consider providing a more meaningful name than parameter name 'i'.</Issue>
            </Message>
            <Message Id="unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MTileList.Set(int, ushort, sbyte, sbyte, int)', correct the spelling of 'unk' in parameter name 'unk1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'MTileList.Set(int, ushort, sbyte, sbyte, int)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
            <Message Id="flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error">In member 'MTileList.Set(int, ushort, sbyte, sbyte, int)', replace the term 'flag' in parameter name 'flag' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MultiComponentList" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="MultiComponent" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'MultiComponent' in type name 'MultiComponentList' exists as a discrete term. If your usage is intended to be single word, case it as 'Multicomponent'.</Issue>
          </Message>
          <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multi' in type name 'MultiComponentList'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Collections.Generic.List`1&lt;Ultima.MultiComponentList+MultiTileEntry&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;MultiComponentList.MultiTileEntry&gt;' in 'MultiComponentList.MultiComponentList(List&lt;MultiComponentList.MultiTileEntry&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="arr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MultiComponentList.MultiComponentList(List&lt;MultiComponentList.MultiTileEntry&gt;)', correct the spelling of 'arr' in parameter name 'arr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'MultiComponentList.MultiComponentList(List&lt;MultiComponentList.MultiTileEntry&gt;)', validate parameter 'arr' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.IO.BinaryReader,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'MultiComponentList.MultiComponentList(BinaryReader, int)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.IO.StreamReader,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ToInt16(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt16(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(StreamReader, int)' with a call to 'Convert.ToInt16(string, IFormatProvider)'. If the result of 'Convert.ToInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt16(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(StreamReader, int)' with a call to 'Convert.ToInt16(string, IFormatProvider)'. If the result of 'Convert.ToInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt16(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(StreamReader, int)' with a call to 'Convert.ToInt16(string, IFormatProvider)'. If the result of 'Convert.ToInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(StreamReader, int)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToUInt16(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToUInt16(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(StreamReader, int)' with a call to 'Convert.ToUInt16(string, IFormatProvider)'. If the result of 'Convert.ToUInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'MultiComponentList.MultiComponentList(StreamReader, int)', validate parameter 'stream' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,Ultima.Multis+ImportType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning">'MultiComponentList.MultiComponentList(string, Multis.ImportType)' has a cyclomatic complexity of 71. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Method" Certainty="90" Level="Error">'MultiComponentList.MultiComponentList(string, Multis.ImportType)' has a maintainability index of 10. Rewrite or refactor the method to increase its maintainability index (MI). An MI below 10 indicates poor maintainability, an MI between 10 and 20 indicates moderate maintainability, and an MI above 20 indicates good maintainability.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local20' can be disposed more than once in method 'MultiComponentList.MultiComponentList(string, Multis.ImportType)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'MultiComponentList.MultiComponentList(string, Multis.ImportType)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="Type" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'MultiComponentList.MultiComponentList(string, Multis.ImportType)', correct the casing of 'Type' in parameter name 'Type' by changing it to 'type'.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt16(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt16(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'Convert.ToInt16(string, IFormatProvider)'. If the result of 'Convert.ToInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt16(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'Convert.ToInt16(string, IFormatProvider)'. If the result of 'Convert.ToInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt16(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'Convert.ToInt16(string, IFormatProvider)'. If the result of 'Convert.ToInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt16(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'Convert.ToInt16(string, IFormatProvider)'. If the result of 'Convert.ToInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt16(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'Convert.ToInt16(string, IFormatProvider)'. If the result of 'Convert.ToInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt16(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'Convert.ToInt16(string, IFormatProvider)'. If the result of 'Convert.ToInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt16(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'Convert.ToInt16(string, IFormatProvider)'. If the result of 'Convert.ToInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt16(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'Convert.ToInt16(string, IFormatProvider)'. If the result of 'Convert.ToInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt16(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'Convert.ToInt16(string, IFormatProvider)'. If the result of 'Convert.ToInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToUInt16(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToUInt16(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'Convert.ToUInt16(string, IFormatProvider)'. If the result of 'Convert.ToUInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToUInt16(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'Convert.ToUInt16(string, IFormatProvider)'. If the result of 'Convert.ToUInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.UInt16.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'ushort.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'ushort.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'ushort.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.MultiComponentList(string, Multis.ImportType)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(Ultima.MTileList[][],System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="newtiles" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MultiComponentList.MultiComponentList(MTileList[][], int, int, int)', correct the spelling of 'newtiles' in parameter name 'newtiles' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'MultiComponentList.MultiComponentList(MTileList[][], int, int, int)', validate parameter 'newtiles' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Empty" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'MultiComponentList.Empty' or change the field to one that is an immutable reference type. If the reference type 'MultiComponentList' is, in fact, immutable, exclude this message.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExportToTextFile(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'MultiComponentList.ExportToTextFile(string)', object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'MultiComponentList.ExportToTextFile(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.ExportToTextFile(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExportToUOAFile(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'MultiComponentList.ExportToUOAFile(string)', object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'MultiComponentList.ExportToUOAFile(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="UOA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'UOA' in member name 'MultiComponentList.ExportToUOAFile(string)' by changing it to 'Uoa'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.ExportToUOAFile(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.ExportToUOAFile(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExportToWscFile(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'MultiComponentList.ExportToWscFile(string)', object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'MultiComponentList.ExportToWscFile(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="Wsc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Wsc' in member name 'MultiComponentList.ExportToWscFile(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.ExportToWscFile(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.ExportToWscFile(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.ExportToWscFile(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.ExportToWscFile(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'MultiComponentList.ExportToWscFile(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetImage(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'MultiComponentList.GetImage(int)', object 'Local4' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local4' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="maxheight" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'MultiComponentList.GetImage(int)', correct the spelling of 'maxheight' in parameter name 'maxheight' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#maxHeight" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="max" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'max' in member name 'MultiComponentList.maxHeight' by changing it to 'Max'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SortedTiles" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'MultiComponentList.SortedTiles' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Tiles" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'MultiComponentList.Tiles' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MultiComponentList+MultiTileEntry" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multi' in type name 'MultiComponentList.MultiTileEntry'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'MultiComponentList.MultiTileEntry'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'MultiComponentList.MultiTileEntry' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'MultiComponentList.MultiTileEntry' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#m_Flags" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MultiComponentList.MultiTileEntry.m_Flags' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'Flags' in member name 'MultiComponentList.MultiTileEntry.m_Flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_ItemID" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MultiComponentList.MultiTileEntry.m_ItemID' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_OffsetX" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MultiComponentList.MultiTileEntry.m_OffsetX' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_OffsetY" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MultiComponentList.MultiTileEntry.m_OffsetY' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_OffsetZ" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MultiComponentList.MultiTileEntry.m_OffsetZ' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Unk1" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MultiComponentList.MultiTileEntry.m_Unk1' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Unk' in member name 'MultiComponentList.MultiTileEntry.m_Unk1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MultiMap" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multi' in type name 'MultiMap'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'MultiMap' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetFacetImage(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'MultiMap.GetFacetImage(int)', object 'Local0' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local0' before all references to it are out of scope.</Issue>
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'MultiMap.GetFacetImage(int)', object 'new FileStream(Local1, FileMode.Open, FileAccess.Read, FileShare.Read)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new FileStream(Local1, FileMode.Open, FileAccess.Read, FileShare.Read)' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'MultiMap.GetFacetImage(int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMultiMap()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'MultiMap.GetMultiMap()', object 'Local9' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local9' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local1' can be disposed more than once in method 'MultiMap.GetMultiMap()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
            <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multi' in member name 'MultiMap.GetMultiMap()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'MultiMap.GetMultiMap()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_StreamBuffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'MultiMap.m_StreamBuffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveFacetImage(System.String,System.Drawing.Bitmap)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'MultiMap.SaveFacetImage(string, Bitmap)', object 'new FileStream(path, FileMode.Create, FileAccess.ReadWrite, FileShare.ReadWrite)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new FileStream(path, FileMode.Create, FileAccess.ReadWrite, FileShare.ReadWrite)' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'MultiMap.SaveFacetImage(string, Bitmap)', validate parameter 'sourceBitmap' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveMultiMap(System.Drawing.Bitmap,System.IO.BinaryWriter)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multi' in member name 'MultiMap.SaveMultiMap(Bitmap, BinaryWriter)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'MultiMap.SaveMultiMap(Bitmap, BinaryWriter)', validate parameter 'image' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'MultiMap.SaveMultiMap(Bitmap, BinaryWriter)', validate parameter 'bin' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Multis" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Multis" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multis' in type name 'Multis'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'Multis' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ImportFromFile(System.Int32,System.String,Ultima.Multis+ImportType)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'Multis.ImportFromFile(int, string, Multis.ImportType)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'Multis.ImportFromFile(int, string, Multis.ImportType)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Load(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'Multis.Load(int)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromCache(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;MultiComponentList&gt;' in 'Multis.LoadFromCache(string)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'Multis.LoadFromCache(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'Multis.LoadFromCache(string)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromDesigner(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local4' can be disposed more than once in method 'Multis.LoadFromDesigner(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
             <Issue Certainty="75" Level="Warning">Object 'Local5' can be disposed more than once in method 'Multis.LoadFromDesigner(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;object[]&gt;' in 'Multis.LoadFromDesigner(string)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'Multis.LoadFromDesigner(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Multis.LoadFromDesigner(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Multis.LoadFromDesigner(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromFile(System.String,Ultima.Multis+ImportType)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'Multis.LoadFromFile(string, Multis.ImportType)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'Multis.LoadFromFile(string, Multis.ImportType)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Components" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Multis.m_Components' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_FileIndex" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Multis.m_FileIndex' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadUOAString(System.IO.BinaryReader)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UOA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'UOA' in member name 'Multis.ReadUOAString(BinaryReader)' by changing it to 'Uoa'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Multis.ReadUOAString(BinaryReader)', validate parameter 'bin' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RebuildTiles(Ultima.MultiComponentList+MultiTileEntry[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;MultiComponentList.MultiTileEntry&gt;' in 'Multis.RebuildTiles(MultiComponentList.MultiTileEntry[])' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local2' can be disposed more than once in method 'Multis.Save(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
             <Issue Certainty="75" Level="Warning">Object 'Local3' can be disposed more than once in method 'Multis.Save(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Multis+ImportType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#MULTICACHE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MULTICACHE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'MULTICACHE' in member name 'Multis.ImportType.MULTICACHE' by changing it to 'Multicache'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TXT" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TXT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'TXT' in member name 'Multis.ImportType.TXT' by changing it to 'Txt'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UOA" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UOA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'UOA' in member name 'Multis.ImportType.UOA' by changing it to 'Uoa'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UOAB" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UOAB" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'UOAB' in member name 'Multis.ImportType.UOAB' by changing it to 'Uoab'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UOADESIGN" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UOADESIGN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'UOADESIGN' in member name 'Multis.ImportType.UOADESIGN' by changing it to 'Uoadesign'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WSC" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="WSC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'WSC' in member name 'Multis.ImportType.WSC' by changing it to 'Wsc'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NativeMethods" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_lread(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Void*,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="lread" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'lread' in member name 'NativeMethods._lread(SafeFileHandle, void*, int)' by changing it to 'Lread'.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods._lread(SafeFileHandle, void*, int)', correct the spelling of 'h' in parameter name 'hFile' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="lp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods._lread(SafeFileHandle, void*, int)', correct the spelling of 'lp' in parameter name 'lpBuffer' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="lread" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'lread' in member name 'NativeMethods._lread(SafeFileHandle, void*, int)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="w" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods._lread(SafeFileHandle, void*, int)', correct the spelling of 'w' in parameter name 'wBytes' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'NativeMethods._lread(SafeFileHandle, void*, int)'.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'NativeMethods._lread(SafeFileHandle, void*, int)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CloseHandle(Ultima.ClientProcessHandle)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'NativeMethods.CloseHandle(ClientProcessHandle)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindWindowA(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="lp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.FindWindowA(string, string)', correct the spelling of 'lp' in parameter name 'lpClassName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.FindWindowA(string, string)', correct the spelling of 'lp' in parameter name 'lpWindowName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'NativeMethods.FindWindowA(string, string)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpClassName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpWindowName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWindowThreadProcessId(Ultima.ClientWindowHandle,Ultima.ClientProcessHandle&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning">Consider a design that does not require that 'processID' be a reference parameter.</Issue>
            </Message>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error">In member 'NativeMethods.GetWindowThreadProcessId(ClientWindowHandle, ref ClientProcessHandle)', correct the casing of 'ID' in parameter name 'processID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'NativeMethods.GetWindowThreadProcessId(ClientWindowHandle, ref ClientProcessHandle)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsWindow(Ultima.ClientWindowHandle)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'NativeMethods.IsWindow(ClientWindowHandle)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_StringBuffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'NativeMethods.m_StringBuffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OemKeyScan(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Oem" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Oem' in member name 'NativeMethods.OemKeyScan(int)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.OemKeyScan(int)', correct the spelling of 'Oem' in parameter name 'wOemChar' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="w" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.OemKeyScan(int)', correct the spelling of 'w' in parameter name 'wOemChar' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'NativeMethods.OemKeyScan(int)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OpenProcess(System.Int32,System.Int32,Ultima.ClientProcessHandle)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error">In member 'NativeMethods.OpenProcess(int, int, ClientProcessHandle)', correct the casing of 'ID' in parameter name 'processID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'NativeMethods.OpenProcess(int, int, ClientProcessHandle)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PostMessage(Ultima.ClientWindowHandle,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.PostMessage(ClientWindowHandle, int, int, int)', correct the spelling of 'Msg' in parameter name 'wMsg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.PostMessage(ClientWindowHandle, int, int, int)', correct the spelling of 'Param' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.PostMessage(ClientWindowHandle, int, int, int)', correct the spelling of 'Param' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.PostMessage(ClientWindowHandle, int, int, int)', correct the spelling of 'Wnd' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.PostMessage(ClientWindowHandle, int, int, int)', correct the spelling of 'h' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="l" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.PostMessage(ClientWindowHandle, int, int, int)', correct the spelling of 'l' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="w" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.PostMessage(ClientWindowHandle, int, int, int)', correct the spelling of 'w' in parameter name 'wMsg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.PostMessage(ClientWindowHandle, int, int, int)', correct the spelling of 'w' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'NativeMethods.PostMessage(ClientWindowHandle, int, int, int)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'NativeMethods.PostMessage(ClientWindowHandle, int, int, int)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadNameString(System.Byte[],System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="len" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning">Parameter 'len' of 'NativeMethods.ReadNameString(byte[], int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'NativeMethods.ReadNameString(byte[], int)', validate parameter 'buffer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadProcessMemory(Ultima.ClientProcessHandle,System.Int32,System.Void*,System.Int32,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="4#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'op' be a reference parameter.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'NativeMethods.ReadProcessMemory(ClientProcessHandle, int, void*, int, ref int)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage(Ultima.ClientWindowHandle,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.SendMessage(ClientWindowHandle, int, int, int)', correct the spelling of 'Msg' in parameter name 'wMsg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.SendMessage(ClientWindowHandle, int, int, int)', correct the spelling of 'Param' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.SendMessage(ClientWindowHandle, int, int, int)', correct the spelling of 'Param' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.SendMessage(ClientWindowHandle, int, int, int)', correct the spelling of 'Wnd' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.SendMessage(ClientWindowHandle, int, int, int)', correct the spelling of 'h' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="l" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.SendMessage(ClientWindowHandle, int, int, int)', correct the spelling of 'l' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="w" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.SendMessage(ClientWindowHandle, int, int, int)', correct the spelling of 'w' in parameter name 'wMsg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.SendMessage(ClientWindowHandle, int, int, int)', correct the spelling of 'w' in parameter name 'wParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'NativeMethods.SendMessage(ClientWindowHandle, int, int, int)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetForegroundWindow(Ultima.ClientWindowHandle)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.SetForegroundWindow(ClientWindowHandle)', correct the spelling of 'Wnd' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.SetForegroundWindow(ClientWindowHandle)', correct the spelling of 'h' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'NativeMethods.SetForegroundWindow(ClientWindowHandle)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SwapEndian(System.Int16)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'NativeMethods.SwapEndian(short)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteProcessMemory(Ultima.ClientProcessHandle,System.Int32,System.Void*,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'NativeMethods.WriteProcessMemory(ClientProcessHandle, int, void*, int, int)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NewItemTileDataMul" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Mul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Mul' in type name 'NewItemTileDataMul'.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'NewItemTileDataMul' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'NewItemTileDataMul' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#anim" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewItemTileDataMul.anim' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="anim" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'anim' in member name 'NewItemTileDataMul.anim' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#flags" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewItemTileDataMul.flags' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'flags' in member name 'NewItemTileDataMul.flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#height" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewItemTileDataMul.height' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#hue" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewItemTileDataMul.hue' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#miscdata" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewItemTileDataMul.miscdata' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="miscdata" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'miscdata' in member name 'NewItemTileDataMul.miscdata' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#name" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewItemTileDataMul.name' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#quality" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewItemTileDataMul.quality' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#quantity" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewItemTileDataMul.quantity' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#stackingoffset" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewItemTileDataMul.stackingoffset' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="stackingoffset" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'stackingoffset' in member name 'NewItemTileDataMul.stackingoffset' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#unk1" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewItemTileDataMul.unk1' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'unk' in member name 'NewItemTileDataMul.unk1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#unk2" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewItemTileDataMul.unk2' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'unk' in member name 'NewItemTileDataMul.unk2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#unk3" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewItemTileDataMul.unk3' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'unk' in member name 'NewItemTileDataMul.unk3' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#value" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewItemTileDataMul.value' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#weight" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewItemTileDataMul.weight' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NewLandTileDataMul" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="NewLand" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'NewLand' in type name 'NewLandTileDataMul' exists as a discrete term. If your usage is intended to be single word, case it as 'Newland'.</Issue>
          </Message>
          <Message Id="Mul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Mul' in type name 'NewLandTileDataMul'.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'NewLandTileDataMul' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'NewLandTileDataMul' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#flags" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewLandTileDataMul.flags' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'flags' in member name 'NewLandTileDataMul.flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#name" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewLandTileDataMul.name' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#texID" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewLandTileDataMul.texID' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#unk1" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'NewLandTileDataMul.unk1' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'unk' in member name 'NewLandTileDataMul.unk1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OldItemTileDataMul" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Mul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Mul' in type name 'OldItemTileDataMul'.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'OldItemTileDataMul' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'OldItemTileDataMul' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#anim" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OldItemTileDataMul.anim' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="anim" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'anim' in member name 'OldItemTileDataMul.anim' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#flags" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OldItemTileDataMul.flags' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'flags' in member name 'OldItemTileDataMul.flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#height" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OldItemTileDataMul.height' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#hue" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OldItemTileDataMul.hue' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#miscdata" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OldItemTileDataMul.miscdata' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="miscdata" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'miscdata' in member name 'OldItemTileDataMul.miscdata' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#name" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OldItemTileDataMul.name' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#quality" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OldItemTileDataMul.quality' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#quantity" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OldItemTileDataMul.quantity' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#stackingoffset" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OldItemTileDataMul.stackingoffset' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="stackingoffset" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'stackingoffset' in member name 'OldItemTileDataMul.stackingoffset' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#unk2" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OldItemTileDataMul.unk2' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'unk' in member name 'OldItemTileDataMul.unk2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#unk3" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OldItemTileDataMul.unk3' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="unk" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'unk' in member name 'OldItemTileDataMul.unk3' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#value" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OldItemTileDataMul.value' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#weight" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OldItemTileDataMul.weight' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OldLandTileDataMul" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Mul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Mul' in type name 'OldLandTileDataMul'.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'OldLandTileDataMul' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'OldLandTileDataMul' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#flags" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OldLandTileDataMul.flags' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'flags' in member name 'OldLandTileDataMul.flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#name" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OldLandTileDataMul.name' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#texID" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'OldLandTileDataMul.texID' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ProcessStream" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#m_Open" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ProcessStream.m_Open' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Position" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ProcessStream.m_Position' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Process" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ProcessStream.m_Process' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'ID' in member name 'ProcessStream.ProcessID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Read(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Ultima.NativeMethods.ReadProcessMemory(Ultima.ClientProcessHandle,System.Int32,System.Void*,System.Int32,System.Int32@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning">'ProcessStream.Read(byte[], int, int)' calls 'NativeMethods.ReadProcessMemory(ClientProcessHandle, int, void*, int, ref int)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Write(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Ultima.NativeMethods.WriteProcessMemory(Ultima.ClientProcessHandle,System.Int32,System.Void*,System.Int32,System.Int32)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning">'ProcessStream.Write(byte[], int, int)' calls 'NativeMethods.WriteProcessMemory(ClientProcessHandle, int, void*, int, int)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RadarCol" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'RadarCol' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Colors" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'RadarCol.Colors' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConvertStringToInt(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning">'RadarCol.ConvertStringToInt(string)' calls 'int.TryParse(string, NumberStyles, IFormatProvider, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
             <Issue Name="TryParse" Certainty="95" Level="Warning">'RadarCol.ConvertStringToInt(string)' calls 'int.TryParse(string, NumberStyles, IFormatProvider, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExportToCSV(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'RadarCol.ExportToCSV(string)', object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="CSV" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'CSV' in member name 'RadarCol.ExportToCSV(string)' by changing it to 'Csv'.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'RadarCol.ExportToCSV(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'RadarCol.ExportToCSV(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetItemColor(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="index+16384" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning">Correct the potential overflow in the operation 'index+16384' in 'RadarCol.GetItemColor(int)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning">Correct the potential overflow in the operation 'index+16384' in 'RadarCol.GetItemColor(int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ImportFromCSV(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'RadarCol.ImportFromCSV(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="CSV" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'CSV' in member name 'RadarCol.ImportFromCSV(string)' by changing it to 'Csv'.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'RadarCol.ImportFromCSV(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'RadarCol.ImportFromCSV(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'RadarCol.ImportFromCSV(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'RadarCol.ImportFromCSV(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'RadarCol.ImportFromCSV(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Colors" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'RadarCol.m_Colors' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local0' can be disposed more than once in method 'RadarCol.Save(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'RadarCol.Save(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetItemColor(System.Int32,System.Int16)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="index+16384" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning">Correct the potential overflow in the operation 'index+16384' in 'RadarCol.SetItemColor(int, short)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SkillGroups" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'SkillGroups' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Initialize()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local1' can be disposed more than once in method 'SkillGroups.Initialize()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'SkillGroups.Initialize()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#List" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;SkillGroup&gt;' in 'SkillGroups.List' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local0' can be disposed more than once in method 'SkillGroups.Save(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SkillList" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;int&gt;' in 'SkillGroups.SkillList' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Skills" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'Skills' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#m_FileIndex" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Skills.m_FileIndex' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_SkillEntries" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Skills.m_SkillEntries' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_StringBuffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Skills.m_StringBuffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local1' can be disposed more than once in method 'Skills.Save(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
             <Issue Certainty="75" Level="Warning">Object 'Local2' can be disposed more than once in method 'Skills.Save(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SkillEntries" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'Skills.SkillEntries' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;SkillInfo&gt;' in 'Skills.SkillEntries' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Sounds" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetSound(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error">In member 'Sounds.GetSound(int)', correct the casing of 'ID' in parameter name 'soundID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSound(System.Int32,System.Boolean&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'translated' be an out parameter.</Issue>
            </Message>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error">In member 'Sounds.GetSound(int, out bool)', correct the casing of 'ID' in parameter name 'soundID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSoundLength(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error">In member 'Sounds.GetSoundLength(int)', correct the casing of 'ID' in parameter name 'soundID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Initialize()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'Sounds.Initialize()' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'Sounds.Initialize()' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'Sounds.Initialize()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsValidSound(System.Int32,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'name' be an out parameter.</Issue>
            </Message>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error">In member 'Sounds.IsValidSound(int, out string)', correct the casing of 'ID' in parameter name 'soundID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Cache" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Sounds.m_Cache' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_FileIndex" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Sounds.m_FileIndex' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Removed" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Sounds.m_Removed' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Translations" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Sounds.m_Translations' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local2' can be disposed more than once in method 'Sounds.Save(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
             <Issue Certainty="75" Level="Warning">Object 'Local3' can be disposed more than once in method 'Sounds.Save(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveSoundListToCSV(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Sounds.SaveSoundListToCSV(string)', object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="CSV" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'CSV' in member name 'Sounds.SaveSoundListToCSV(string)' by changing it to 'Csv'.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'Sounds.SaveSoundListToCSV(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Sounds.SaveSoundListToCSV(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Sounds.SaveSoundListToCSV(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Sounds.SaveSoundListToCSV(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SpeechEntry" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'ID' in member name 'SpeechEntry.ID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#KeyWord" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="KeyWord" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'KeyWord' in member name 'SpeechEntry.KeyWord' exists as a discrete term. If your usage is intended to be single word, case it as 'Keyword' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SpeechList" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'SpeechList' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning">Initialize all static fields in 'SpeechList' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConvertStringToInt(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning">'SpeechList.ConvertStringToInt(string)' calls 'int.TryParse(string, NumberStyles, IFormatProvider, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
             <Issue Name="TryParse" Certainty="95" Level="Warning">'SpeechList.ConvertStringToInt(string)' calls 'int.TryParse(string, NumberStyles, IFormatProvider, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
            <Message Id="int" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error">Consider replacing the language-specific data type identifier 'Int' in member name 'SpeechList.ConvertStringToInt(string)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'SpeechList.ConvertStringToInt(string)', validate parameter 'text' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Entries" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'SpeechList.Entries' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;SpeechEntry&gt;' in 'SpeechList.Entries' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExportToCSV(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'SpeechList.ExportToCSV(string)', object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="CSV" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'CSV' in member name 'SpeechList.ExportToCSV(string)' by changing it to 'Csv'.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'SpeechList.ExportToCSV(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'SpeechList.ExportToCSV(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ImportFromCSV(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'SpeechList.ImportFromCSV(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="CSV" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'CSV' in member name 'SpeechList.ImportFromCSV(string)' by changing it to 'Csv'.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'SpeechList.ImportFromCSV(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'SpeechList.ImportFromCSV(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Buffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'SpeechList.m_Buffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveSpeechList(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local0' can be disposed more than once in method 'SpeechList.SaveSpeechList(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'SpeechList.SaveSpeechList(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SpeechList+IDComparer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="TypeAbbreviation" Certainty="85" Level="Error">Correct the casing of 'ID' in type name 'SpeechList.IDComparer' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'SpeechList.IDComparer'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="desc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'SpeechList.IDComparer.IDComparer(bool)', correct the spelling of 'desc' in parameter name 'desc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Compare(Ultima.SpeechEntry,Ultima.SpeechEntry)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">In member 'SpeechList.IDComparer.Compare(SpeechEntry, SpeechEntry)', change parameter name 'objA' to 'x' in order to match the identifier as it has been declared in 'IComparer&lt;SpeechEntry&gt;.Compare(SpeechEntry, SpeechEntry)'.</Issue>
            </Message>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">In member 'SpeechList.IDComparer.Compare(SpeechEntry, SpeechEntry)', change parameter name 'objB' to 'y' in order to match the identifier as it has been declared in 'IComparer&lt;SpeechEntry&gt;.Compare(SpeechEntry, SpeechEntry)'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'SpeechList.IDComparer.Compare(SpeechEntry, SpeechEntry)', validate parameter 'objA' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'SpeechList.IDComparer.Compare(SpeechEntry, SpeechEntry)', validate parameter 'objB' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SpeechList+KeyWordComparer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="KeyWord" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'KeyWord' in type name 'SpeechList.KeyWordComparer' exists as a discrete term. If your usage is intended to be single word, case it as 'Keyword'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'SpeechList.KeyWordComparer'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="desc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'SpeechList.KeyWordComparer.KeyWordComparer(bool)', correct the spelling of 'desc' in parameter name 'desc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Compare(Ultima.SpeechEntry,Ultima.SpeechEntry)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">In member 'SpeechList.KeyWordComparer.Compare(SpeechEntry, SpeechEntry)', change parameter name 'objA' to 'x' in order to match the identifier as it has been declared in 'IComparer&lt;SpeechEntry&gt;.Compare(SpeechEntry, SpeechEntry)'.</Issue>
            </Message>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">In member 'SpeechList.KeyWordComparer.Compare(SpeechEntry, SpeechEntry)', change parameter name 'objB' to 'y' in order to match the identifier as it has been declared in 'IComparer&lt;SpeechEntry&gt;.Compare(SpeechEntry, SpeechEntry)'.</Issue>
            </Message>
            <Message Id="System.String.Compare(System.String,System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.Compare(string, string)' could vary based on the current user's locale settings, replace this call in 'SpeechList.KeyWordComparer.Compare(SpeechEntry, SpeechEntry)' with a call to 'string.Compare(string, string, StringComparison)'. If the result of 'string.Compare(string, string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.Compare(string, string)' could vary based on the current user's locale settings, replace this call in 'SpeechList.KeyWordComparer.Compare(SpeechEntry, SpeechEntry)' with a call to 'string.Compare(string, string, StringComparison)'. If the result of 'string.Compare(string, string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'SpeechList.KeyWordComparer.Compare(SpeechEntry, SpeechEntry)', validate parameter 'objA' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'SpeechList.KeyWordComparer.Compare(SpeechEntry, SpeechEntry)', validate parameter 'objB' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SpeechList+OrderComparer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'SpeechList.OrderComparer'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Compare(Ultima.SpeechEntry,Ultima.SpeechEntry)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">In member 'SpeechList.OrderComparer.Compare(SpeechEntry, SpeechEntry)', change parameter name 'objA' to 'x' in order to match the identifier as it has been declared in 'IComparer&lt;SpeechEntry&gt;.Compare(SpeechEntry, SpeechEntry)'.</Issue>
            </Message>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">In member 'SpeechList.OrderComparer.Compare(SpeechEntry, SpeechEntry)', change parameter name 'objB' to 'y' in order to match the identifier as it has been declared in 'IComparer&lt;SpeechEntry&gt;.Compare(SpeechEntry, SpeechEntry)'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'SpeechList.OrderComparer.Compare(SpeechEntry, SpeechEntry)', validate parameter 'objA' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'SpeechList.OrderComparer.Compare(SpeechEntry, SpeechEntry)', validate parameter 'objB' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SpeechMul" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Mul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Mul' in type name 'SpeechMul'.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'SpeechMul' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'SpeechMul' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#id" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SpeechMul.id' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#keyword" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SpeechMul.keyword' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#length" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SpeechMul.length' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StaticTile" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'StaticTile' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'StaticTile' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#m_Hue" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StaticTile.m_Hue' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_ID" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StaticTile.m_ID' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_X" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StaticTile.m_X' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Y" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StaticTile.m_Y' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Z" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StaticTile.m_Z' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringEntry" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Int32,System.String,System.Byte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error">In member 'StringEntry.StringEntry(int, string, byte)', replace the term 'flag' in parameter name 'flag' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Int32,System.String,Ultima.StringEntry+CliLocFlag)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error">In member 'StringEntry.StringEntry(int, string, StringEntry.CliLocFlag)', replace the term 'flag' in parameter name 'flag' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Flag" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'Flag' in member name 'StringEntry.Flag' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Format(System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'StringEntry.Format(params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'StringEntry.Format(params object[])', validate parameter 'args' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Args" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'StringEntry.m_Args' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_RegEx" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'StringEntry.m_RegEx' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SplitFormat(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="argstr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'StringEntry.SplitFormat(string)', correct the spelling of 'argstr' in parameter name 'argstr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'StringEntry.SplitFormat(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'StringEntry.SplitFormat(string)', validate parameter 'argstr' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringEntry+CliLocFlag" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="FlagsRename" Certainty="95" Level="CriticalError">In enum 'StringEntry.CliLocFlag', change the name of 'StringEntry.CliLocFlag.Original' to 'None'.</Issue>
          </Message>
          <Message TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If enumeration name 'StringEntry.CliLocFlag' is singular, change it to a plural form.</Issue>
          </Message>
          <Message Id="Cli" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Cli' in type name 'StringEntry.CliLocFlag'.</Issue>
          </Message>
          <Message Id="Loc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Loc' in type name 'StringEntry.CliLocFlag'.</Issue>
          </Message>
          <Message Id="Flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="Error">Replace the term 'Flag' in type name 'StringEntry.CliLocFlag' with an appropriate alternate or remove it entirely.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="StringList" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'StringList.StringList(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Entries" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'StringList.Entries' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;StringEntry&gt;' in 'StringList.Entries' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadEntry(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'StringList.LoadEntry(string)', object 'new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read)' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Buffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'StringList.m_Buffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveStringList(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local0' can be disposed more than once in method 'StringList.SaveStringList(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'StringList.SaveStringList(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringList+FlagComparer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'StringList.FlagComparer'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message Id="Flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="Error">Replace the term 'Flag' in type name 'StringList.FlagComparer' with an appropriate alternate or remove it entirely.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="desc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'StringList.FlagComparer.FlagComparer(bool)', correct the spelling of 'desc' in parameter name 'desc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Compare(Ultima.StringEntry,Ultima.StringEntry)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">In member 'StringList.FlagComparer.Compare(StringEntry, StringEntry)', change parameter name 'objA' to 'x' in order to match the identifier as it has been declared in 'IComparer&lt;StringEntry&gt;.Compare(StringEntry, StringEntry)'.</Issue>
            </Message>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">In member 'StringList.FlagComparer.Compare(StringEntry, StringEntry)', change parameter name 'objB' to 'y' in order to match the identifier as it has been declared in 'IComparer&lt;StringEntry&gt;.Compare(StringEntry, StringEntry)'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'StringList.FlagComparer.Compare(StringEntry, StringEntry)', validate parameter 'objA' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'StringList.FlagComparer.Compare(StringEntry, StringEntry)', validate parameter 'objB' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringList+NumberComparer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'StringList.NumberComparer'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="desc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'StringList.NumberComparer.NumberComparer(bool)', correct the spelling of 'desc' in parameter name 'desc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Compare(Ultima.StringEntry,Ultima.StringEntry)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">In member 'StringList.NumberComparer.Compare(StringEntry, StringEntry)', change parameter name 'objA' to 'x' in order to match the identifier as it has been declared in 'IComparer&lt;StringEntry&gt;.Compare(StringEntry, StringEntry)'.</Issue>
            </Message>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">In member 'StringList.NumberComparer.Compare(StringEntry, StringEntry)', change parameter name 'objB' to 'y' in order to match the identifier as it has been declared in 'IComparer&lt;StringEntry&gt;.Compare(StringEntry, StringEntry)'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'StringList.NumberComparer.Compare(StringEntry, StringEntry)', validate parameter 'objA' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'StringList.NumberComparer.Compare(StringEntry, StringEntry)', validate parameter 'objB' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringList+TextComparer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'StringList.TextComparer'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="desc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'StringList.TextComparer.TextComparer(bool)', correct the spelling of 'desc' in parameter name 'desc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Compare(Ultima.StringEntry,Ultima.StringEntry)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">In member 'StringList.TextComparer.Compare(StringEntry, StringEntry)', change parameter name 'objA' to 'x' in order to match the identifier as it has been declared in 'IComparer&lt;StringEntry&gt;.Compare(StringEntry, StringEntry)'.</Issue>
            </Message>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">In member 'StringList.TextComparer.Compare(StringEntry, StringEntry)', change parameter name 'objB' to 'y' in order to match the identifier as it has been declared in 'IComparer&lt;StringEntry&gt;.Compare(StringEntry, StringEntry)'.</Issue>
            </Message>
            <Message Id="System.String.Compare(System.String,System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.Compare(string, string)' could vary based on the current user's locale settings, replace this call in 'StringList.TextComparer.Compare(StringEntry, StringEntry)' with a call to 'string.Compare(string, string, StringComparison)'. If the result of 'string.Compare(string, string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.Compare(string, string)' could vary based on the current user's locale settings, replace this call in 'StringList.TextComparer.Compare(StringEntry, StringEntry)' with a call to 'string.Compare(string, string, StringComparison)'. If the result of 'string.Compare(string, string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'StringList.TextComparer.Compare(StringEntry, StringEntry)', validate parameter 'objA' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'StringList.TextComparer.Compare(StringEntry, StringEntry)', validate parameter 'objB' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Textures" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'Textures' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetIdxLength()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Idx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Idx' in member name 'Textures.GetIdxLength()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'Textures.GetIdxLength()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTexture(System.Int32,System.Boolean&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'patched' be an out parameter.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Textures.GetTexture(int, out bool)', object 'Local4' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local4' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Cache" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Textures.m_Cache' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_FileIndex" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Textures.m_FileIndex' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_patched" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Textures.m_patched' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Removed" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Textures.m_Removed' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_StreamBuffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'Textures.m_StreamBuffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Textures.Save(string)', object 'Local3' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local3' before all references to it are out of scope.</Issue>
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'Textures.Save(string)', object 'Local4' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local4' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning">In method 'Textures.Save(string)', call System.IDisposable.Dispose on object 'Local10' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning">In method 'Textures.Save(string)', call System.IDisposable.Dispose on object 'Local7' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Tile" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'Tile' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'Tile' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
          <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Error">'Tile' should override Equals since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'Tile' should define operator '!=' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'Tile' should define operator '&lt;' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'Tile' should define operator '==' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'Tile' should define operator '&gt;' since it implements IComparable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.UInt16,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Tile.Tile(ushort, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.UInt16,System.SByte,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Tile.Tile(ushort, sbyte, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
            <Message Id="flag" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning">Parameter 'flag' of 'Tile.Tile(ushort, sbyte, sbyte)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error">In member 'Tile.Tile(ushort, sbyte, sbyte)', replace the term 'flag' in parameter name 'flag' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError">Call the 'ArgumentNullException' constructor that contains a message and/or paramName parameter.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">In member 'Tile.CompareTo(object)', change parameter name 'x' to 'obj' in order to match the identifier as it has been declared in 'IComparable.CompareTo(object)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'ID' in member name 'Tile.ID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set(System.UInt16,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Tile.Set(ushort, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set(System.UInt16,System.SByte,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Tile.Set(ushort, sbyte, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
            <Message Id="flag" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning">Parameter 'flag' of 'Tile.Set(ushort, sbyte, sbyte)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error">In member 'Tile.Set(ushort, sbyte, sbyte)', replace the term 'flag' in parameter name 'flag' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Z" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than member name 'Tile.Z'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TileData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning">Initialize all static fields in 'TileData' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConvertStringToInt(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning">'TileData.ConvertStringToInt(string)' calls 'int.TryParse(string, NumberStyles, IFormatProvider, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
             <Issue Name="TryParse" Certainty="95" Level="Warning">'TileData.ConvertStringToInt(string)' calls 'int.TryParse(string, NumberStyles, IFormatProvider, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
            <Message Id="int" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error">Consider replacing the language-specific data type identifier 'Int' in member name 'TileData.ConvertStringToInt(string)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'TileData.ConvertStringToInt(string)', validate parameter 'text' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExportItemDataToCSV(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning">'TileData.ExportItemDataToCSV(string)' has a cyclomatic complexity of 35. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'TileData.ExportItemDataToCSV(string)', object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="CSV" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'CSV' in member name 'TileData.ExportItemDataToCSV(string)' by changing it to 'Csv'.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'TileData.ExportItemDataToCSV(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TileData.ExportItemDataToCSV(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TileData.ExportItemDataToCSV(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TileData.ExportItemDataToCSV(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExportLandDataToCSV(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning">'TileData.ExportLandDataToCSV(string)' has a cyclomatic complexity of 35. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'TileData.ExportLandDataToCSV(string)', object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new FileStream(FileName, FileMode.Create, FileAccess.ReadWrite)' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="CSV" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'CSV' in member name 'TileData.ExportLandDataToCSV(string)' by changing it to 'Csv'.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'TileData.ExportLandDataToCSV(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TileData.ExportLandDataToCSV(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TileData.ExportLandDataToCSV(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HeightTable" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'TileData.HeightTable' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ImportItemDataFromCSV(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'TileData.ImportItemDataFromCSV(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="CSV" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'CSV' in member name 'TileData.ImportItemDataFromCSV(string)' by changing it to 'Csv'.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'TileData.ImportItemDataFromCSV(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'TileData.ImportItemDataFromCSV(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'TileData.ImportItemDataFromCSV(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ImportLandDataFromCSV(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError">Modify 'TileData.ImportLandDataFromCSV(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="CSV" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'CSV' in member name 'TileData.ImportLandDataFromCSV(string)' by changing it to 'Csv'.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'TileData.ImportLandDataFromCSV(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'TileData.ImportLandDataFromCSV(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'TileData.ImportLandDataFromCSV(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ItemTable" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'TileData.ItemTable' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LandTable" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'TileData.LandTable' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_HeightTable" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'TileData.m_HeightTable' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_ItemData" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'TileData.m_ItemData' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_LandData" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'TileData.m_LandData' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_StringBuffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'TileData.m_StringBuffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadNameString(System.IO.BinaryReader)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'TileData.ReadNameString(BinaryReader)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveTileData(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local0' can be disposed more than once in method 'TileData.SaveTileData(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'TileData.SaveTileData(string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TileFlag" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="DoNotMarkEnumsWithFlags" Category="Microsoft.Usage" CheckId="CA2217" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
           <Issue Certainty="50" Level="Error">'TileFlag' is marked with FlagsAttribute but a discrete member cannot be found for every settable bit that is used across the range of enum values. Remove FlagsAttribute from the type or define new members for the following (currently missing) values: 0x80000000, 0x100000000, 0x200000000, 0x400000000, 0x800000000, 0x1000000000, 0x2000000000, 0x4000000000, 0x8000000000, 0x10000000000, 0x20000000000, 0x40000000000, 0x80000000000, 0x100000000000, 0x200000000000, 0x400000000000, 0x800000000000, 0x1000000000000, 0x2000000000000, 0x4000000000000, 0x8000000000000, 0x10000000000000, 0x20000000000000, 0x40000000000000, 0x80000000000000, 0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000</Issue>
          </Message>
          <Message TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If enumeration name 'TileFlag' is singular, change it to a plural form.</Issue>
          </Message>
          <Message Id="Flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="Error">Replace the term 'Flag' in type name 'TileFlag' with an appropriate alternate or remove it entirely.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="TileList" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Add(System.UInt16,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileList.Add(ushort, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Add(System.UInt16,System.SByte,System.SByte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="z" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileList.Add(ushort, sbyte, sbyte)', consider providing a more meaningful name than parameter name 'z'.</Issue>
            </Message>
            <Message Id="flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error">In member 'TileList.Add(ushort, sbyte, sbyte)', replace the term 'flag' in parameter name 'flag' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileList.Get(int)', consider providing a more meaningful name than parameter name 'i'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TileMatrix" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'TileMatrix' because it creates members of the following IDisposable types: 'FileStream', 'BinaryReader'. If 'TileMatrix' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error">In member 'TileMatrix.TileMatrix(int, int, int, int, string)', correct the casing of 'ID' in parameter name 'mapID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TileMatrix.TileMatrix(int, int, int, int, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TileMatrix.TileMatrix(int, int, int, int, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TileMatrix.TileMatrix(int, int, int, int, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TileMatrix.TileMatrix(int, int, int, int, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'TileMatrix.TileMatrix(int, int, int, int, string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'TileMatrix.TileMatrix(int, int, int, int, string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddPendingStatic(System.Int32,System.Int32,Ultima.StaticTile)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="blockx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.AddPendingStatic(int, int, StaticTile)', correct the spelling of 'blockx' in parameter name 'blockx' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="toadd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.AddPendingStatic(int, int, StaticTile)', correct the spelling of 'toadd' in parameter name 'toadd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EmptyStaticBlock" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'TileMatrix.EmptyStaticBlock' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLandBlock(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetLandBlock(int, int)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetLandBlock(int, int)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLandBlock(System.Int32,System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetLandBlock(int, int, bool)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetLandBlock(int, int, bool)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLandTile(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetLandTile(int, int)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetLandTile(int, int)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLandTile(System.Int32,System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetLandTile(int, int, bool)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetLandTile(int, int, bool)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPendingStatics(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="blockx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetPendingStatics(int, int)', correct the spelling of 'blockx' in parameter name 'blockx' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStaticBlock(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetStaticBlock(int, int)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetStaticBlock(int, int)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStaticBlock(System.Int32,System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetStaticBlock(int, int, bool)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetStaticBlock(int, int, bool)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStaticTiles(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetStaticTiles(int, int)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetStaticTiles(int, int)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStaticTiles(System.Int32,System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetStaticTiles(int, int, bool)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.GetStaticTiles(int, int, bool)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InvalidLandBlock" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'TileMatrix.InvalidLandBlock' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsStaticBlockRemoved(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="blockx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.IsStaticBlockRemoved(int, int)', correct the spelling of 'blockx' in parameter name 'blockx' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsUOPAlreadyRead" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UOP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'UOP' in member name 'TileMatrix.IsUOPAlreadyRead' by changing it to 'Uop'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsUOPFormat" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UOP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'UOP' in member name 'TileMatrix.IsUOPFormat' by changing it to 'Uop'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Buffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'TileMatrix.m_Buffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Lists" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'TileMatrix.m_Lists' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PendingStatic(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="blockx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.PendingStatic(int, int)', correct the spelling of 'blockx' in parameter name 'blockx' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadLandBlock(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error">In method 'TileMatrix.ReadLandBlock(int, int)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadUOPFiles(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="Reserved" Certainty="95" Level="Error">'TileMatrix.ReadUOPFiles(string)' creates an exception of type 'IndexOutOfRangeException', an exception type that is reserved by the runtime and should never be raised by managed code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TileMatrix.ReadUOPFiles(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'TileMatrix.ReadUOPFiles(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveStaticBlock(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="blockx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.RemoveStaticBlock(int, int)', correct the spelling of 'blockx' in parameter name 'blockx' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetLandBlock(System.Int32,System.Int32,Ultima.Tile[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.SetLandBlock(int, int, Tile[])', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.SetLandBlock(int, int, Tile[])', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetStaticBlock(System.Int32,System.Int32,Ultima.HuedTile[][][])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.SetStaticBlock(int, int, HuedTile[][][])', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrix.SetStaticBlock(int, int, HuedTile[][][])', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StaticIndex" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'TileMatrix.StaticIndex' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StaticIndexInit" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'TileMatrix.StaticIndexInit' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TileMatrixPatch" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(Ultima.TileMatrix,System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TileMatrixPatch.TileMatrixPatch(TileMatrix, int, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TileMatrixPatch.TileMatrixPatch(TileMatrix, int, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TileMatrixPatch.TileMatrixPatch(TileMatrix, int, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TileMatrixPatch.TileMatrixPatch(TileMatrix, int, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TileMatrixPatch.TileMatrixPatch(TileMatrix, int, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'TileMatrixPatch.TileMatrixPatch(TileMatrix, int, string)', validate parameter 'matrix' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLandBlock(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrixPatch.GetLandBlock(int, int)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrixPatch.GetLandBlock(int, int)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLandTile(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrixPatch.GetLandTile(int, int)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrixPatch.GetLandTile(int, int)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStaticBlock(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrixPatch.GetStaticBlock(int, int)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrixPatch.GetStaticBlock(int, int)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStaticTiles(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrixPatch.GetStaticTiles(int, int)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrixPatch.GetStaticTiles(int, int)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsLandBlockPatched(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="IsLand" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'IsLand' in member name 'TileMatrixPatch.IsLandBlockPatched(int, int)' exists as a discrete term. If your usage is intended to be single word, case it as 'Island' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrixPatch.IsLandBlockPatched(int, int)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrixPatch.IsLandBlockPatched(int, int)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsStaticBlockPatched(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrixPatch.IsStaticBlockPatched(int, int)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'TileMatrixPatch.IsStaticBlockPatched(int, int)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LandBlocks" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'TileMatrixPatch.LandBlocks' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_Buffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'TileMatrixPatch.m_Buffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_TileBuffer" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'TileMatrixPatch.m_TileBuffer' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PatchLand(Ultima.TileMatrix,System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local1' can be disposed more than once in method 'TileMatrixPatch.PatchLand(TileMatrix, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PatchStatics(Ultima.TileMatrix,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local1' can be disposed more than once in method 'TileMatrixPatch.PatchStatics(TileMatrix, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
             <Issue Certainty="75" Level="Warning">Object 'Local2' can be disposed more than once in method 'TileMatrixPatch.PatchStatics(TileMatrix, string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StaticBlocks" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'TileMatrixPatch.StaticBlocks' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UnicodeChar" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Bytes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'UnicodeChar.Bytes' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetImage(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'UnicodeChar.GetImage(bool)', object 'Local0' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local0' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetBuffer(System.Drawing.Bitmap)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'UnicodeChar.SetBuffer(Bitmap)', validate parameter 'bmp' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UnicodeFont" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Chars" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'UnicodeFont.Chars' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UnicodeFonts" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning">Initialize all static fields in 'UnicodeFonts' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fonts" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'UnicodeFonts.Fonts' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Initialize()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local2' can be disposed more than once in method 'UnicodeFonts.Initialize()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m_files" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
             <Issue Name="Static" Certainty="95" Level="Warning">The field name 'UnicodeFonts.m_files' suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">Object 'Local1' can be disposed more than once in method 'UnicodeFonts.Save(string, int)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Issue>
            </Message>
            <Message Id="filetype" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UnicodeFonts.Save(string, int)', correct the spelling of 'filetype' in parameter name 'filetype' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteText(System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning">In method 'UnicodeFonts.WriteText(int, string)', object 'Local0' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'Local0' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'UnicodeFonts.WriteText(int, string)', validate parameter 'text' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UOSound" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#buffer" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UOSound.buffer' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ID" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UOSound.ID' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Name" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UOSound.Name' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Verdata" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Verdata" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Verdata' in type name 'Verdata'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'Verdata' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Patches" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'Verdata.Patches' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WindowProcessStream" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ProcessID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_ProcessID()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="Ultima.NativeMethods.GetWindowThreadProcessId(Ultima.ClientWindowHandle,Ultima.ClientProcessHandle@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2016-12-03 19:05:44Z" FixCategory="NonBreaking">
               <Issue Name="HResultOrErrorCode" Certainty="95" Level="Warning">'WindowProcessStream.ProcessID.get()' calls 'NativeMethods.GetWindowThreadProcessId(ClientWindowHandle, ref ClientProcessHandle)' but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502">
   <Name>Avoid excessive complexity</Name>
   <Description>Method implementations that are exceedingly complex increase the challenge of understanding and maintaining code.</Description>
   <Resolution Name="Default">{0} has a cyclomatic complexity of {1}. Rewrite or refactor the method to reduce complexity to {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182212.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021">
   <Name>Avoid out parameters</Name>
   <Description>Using out parameters might indicate a design flaw. Although there are legitimate times to use out parameters, their use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be an out parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182131.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505">
   <Name>Avoid unmaintainable code</Name>
   <Description>Types and methods with a high degree of class coupling, cyclomatic complexity and/or program length can be difficult to maintain.</Description>
   <Resolution Name="Method">{0} has a maintainability index of {1}. Rewrite or refactor the method to increase its maintainability index (MI). An MI below {2} indicates poor maintainability, an MI between {2} and {3} indicates moderate maintainability, and an MI above {3} indicates good maintainability.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386043.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change {0} to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182327.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ComVisibleTypeBaseTypesShouldBeComVisible" Category="Microsoft.Interoperability" CheckId="CA1405">
   <Name>COM visible type base types should be COM visible</Name>
   <Description>COM visible types should have an object hierarchy that is uniformly COM visible.</Description>
   <Resolution Name="Default">{0} is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182202.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberParameterShouldBeCompoundWord">In member {0}, the discrete term '{1}' in parameter name {2} should be expressed as a compound word, '{3}'.</Resolution>
   <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="TypeShouldBeDiscreteTerm">The compound word '{0}' in type name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/3hk32yyz.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009">
   <Name>Declare event handlers correctly</Name>
   <Description>By convention, .NET events have two parameters that specify the event sender and event data. Event handler signatures should follow this form: void MyEventHandler(object sender, EventArgs e). The 'sender' parameter is always of type System.Object, even if it is possible to employ a more specific type. The 'e' parameter is always of type System.EventArgs. Events that do not provide event data should use the System.EventHandler delegate type. Event handlers return void so that they can send each event to multiple target methods. Any value returned by a target would be lost after the first call.</Description>
   <Resolution Name="First">Declare the first parameter of {0} as an object named 'sender'.</Resolution>
   <Resolution Name="Second">Declare the second parameter of {0} as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182133.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026">
   <Name>Default parameters should not be used</Name>
   <Description>Some programming languages do not support default parameters. Replace default parameters with method overloads that supply the default argument.</Description>
   <Resolution Name="Default">Replace method {0} with an overload that supplies all default arguments.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182135.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="ExceptionEdge">In method {0}, object {1} is not disposed along all exception paths. Call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104">
   <Name>Do not declare read only mutable reference types</Name>
   <Description>A read-only declaration for a mutable reference type does not prevent the field's instance data from being modified. For example, a read-only StringBuilder field declaration does not make sense, since the data encapsulated by the StringBuilder can be modified using the read-only reference.</Description>
   <Resolution Name="Default">Remove the read-only designation from {0} or change the field to one that is an immutable reference type. If the reference type {1} is, in fact, immutable, exclude this message.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182302.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="25">Error</MessageLevel>
   <File Name="securityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806">
   <Name>Do not ignore method results</Name>
   <Description>The result of methods that return new instances of strings should be assigned to a variable and subsequently used. If the result of a method that creates a new object, such as String.ToLower(), is not assigned to a variable, the call is wasted.</Description>
   <Resolution Name="HResultOrErrorCode">{0} calls {1} but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.</Resolution>
   <Resolution Name="TryParse">{0} calls {1} but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182273.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotMarkEnumsWithFlags" Category="Microsoft.Usage" CheckId="CA2217">
   <Name>Do not mark enums with FlagsAttribute</Name>
   <Description>The enumeration does not appear to contain a consistent set values that can be combined using  the OR (|) and AND (&amp;amp;amp;) operators. Using the Flags attribute on an enumeration suggests that the enumeration values are meant to be combined using the AND and OR operators. Typically, a flags enumeration uses values that are either powers of two, or combine other values that are powers of two.</Description>
   <Resolution Name="Default">{0} is marked with FlagsAttribute but a discrete member cannot be found for every settable bit that is used across the range of enum values. Remove FlagsAttribute from the type or define new members for the following (currently missing) values: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182335.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045">
   <Name>Do not pass types by reference</Name>
   <Description>Although there are legitimate times to use reference parameters, such use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be a reference parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182146.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="Reserved">{0} creates an exception of type {1}, an exception type that is reserved by the runtime and should never be raised by managed code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182338.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008">
   <Name>Enums should have zero value</Name>
   <Description>An enum should generally have a zero value. If the enum is not decorated with the Flags attribute, it should have a member with a value of zero that represents the empty state. Optionally, this value is named 'None'. For a Flags-attributed enum, a zero-valued member is optional and, if it exists, should always be named 'None'. This value should indicate that no values have been set in the enum. Using a zero-valued member for other purposes is contrary to the use of the Flags attribute in that the bitwise AND and OR operators are useless with the member.</Description>
   <Resolution Name="FlagsRename">In enum {0}, change the name of {1} to 'None'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182149.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714">
   <Name>Flags enums should have plural names</Name>
   <Description>An enumeration marked with FlagsAttribute should have a plural name.</Description>
   <Resolution Name="Default">If enumeration name {0} is singular, change it to a plural form.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264486.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberAbbreviation">Correct the casing of '{0}' in member name {1} by changing it to '{2}'. '{2}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Resolution Name="MemberParameterAbbreviation">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'. '{3}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="TypeAbbreviation">Correct the casing of '{0}' in type name {1} by changing it to '{2}'. '{2}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Assembly">Correct the spelling of '{0}' in assembly name {1}.</Resolution>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberMoreMeaningfulName">Consider providing a more meaningful name than member name {0}.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710">
   <Name>Identifiers should have correct suffix</Name>
   <Description>Types that extend certain base types have specified name suffixes. Types that extend Attribute, for example, should be suffixed in 'Attribute', as in ObsoleteAttribute. This rules checks types that extend several base types, including Attribute, Exception, EventArgs, IMembershipPermission, Stream, and others.</Description>
   <Resolution Name="Default">Rename {0} to end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182244.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Resolution Name="LanguageSpecificMember">Consider replacing the language-specific data type identifier '{0}' in member name {1} with either a language-independent equivalent or a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707">
   <Name>Identifiers should not contain underscores</Name>
   <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
   <Resolution Name="Member">Remove the underscores from member name {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182245.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
   <Name>Initialize reference type static fields inline</Name>
   <Description>Static fields should be initialized when declared. Initializing static data in explicit static constructors results in less performant code.</Description>
   <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182275.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">CriticalWarning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
   <Name>Instantiate argument exceptions correctly</Name>
   <Description>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</Description>
   <Resolution Name="NoArguments">Call the {0} constructor that contains a message and/or paramName parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182347.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithAssemblyVersion" Category="Microsoft.Design" CheckId="CA1016">
   <Name>Mark assemblies with AssemblyVersionAttribute</Name>
   <Description>Assemblies should use version numbers. The version number is considered part of an assembly's identity. Versioning is applied by means of the AssemblyVersion attribute.</Description>
   <Resolution Name="Default">Add an AssemblyVersion attribute to {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182155.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithComVisible" Category="Microsoft.Design" CheckId="CA1017">
   <Name>Mark assemblies with ComVisibleAttribute</Name>
   <Description>The System.Runtime.InteropServices.ComVisible attribute indicates whether COM clients can use the library. Good design dictates that developers explicitly indicate COM visibility. The default value for this attribute is 'true'. However, the best design is to mark the assembly ComVisible false, and then mark types, interfaces, and individual members as ComVisible true, as appropriate.</Description>
   <Resolution Name="NoAttribute">Because {0} exposes externally visible types, mark it with ComVisible(false) at the assembly level and then mark all types within the assembly that should be exposed to COM clients with ComVisible(true).</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182157.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError, Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414">
   <Name>Mark boolean P/Invoke arguments with MarshalAs</Name>
   <Description>All boolean P/Invoke parameters and return types should be explicitly marked with the MarshalAs attribute. By default, the system will marshal all booleans as 4-byte UnmanagedType.Bool. This is the correct behavior for Win32 'BOOL' arguments but incorrect for C++ 'bool' arguments, which should be marshaled as 1-byte UnmanagedType.U1. For code maintainability reasons, always explicitly specify the marshaling information for boolean arguments and return values.</Description>
   <Resolution Name="Return">Add the MarshalAsAttribute to the return type of P/Invoke {0}. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182206.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
   <Name>Nested types should not be visible</Name>
   <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
   <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182162.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211">
   <Name>Non-constant fields should not be visible</Name>
   <Description>Static fields should be constant unless you carefully manage access to the field using locks. Using static variables without making them thread safe can compromise execution state. This rule applies to managed code libraries. If the analyzed assembly is an application, it is usually safe to exclude violations of this rule.</Description>
   <Resolution Name="Default">Consider making {0} non-public or a constant.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182353.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308">
   <Name>Normalize strings to uppercase</Name>
   <Description>Strings should be normalized to upper-case.</Description>
   <Resolution Name="ToUpperInvariant">In method {0}, replace the call to {1} with String.ToUpperInvariant().</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233">
   <Name>Operations should not overflow</Name>
   <Description>Arithmetic operations should not be done without first validating the operands to prevent overflow.</Description>
   <Resolution Name="Default">Correct the potential overflow in the operation '{0}' in {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182354.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
   <Name>Override equals and operator equals on value types</Name>
   <Description>The default System.ValueType implementation might not perform as well as a custom implementation.</Description>
   <Resolution Name="Equals">{0} should override Equals.</Resolution>
   <Resolution Name="op_Equality">{0} should override the equality (==) and inequality (!=) operators.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182276.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036">
   <Name>Override methods on comparable types</Name>
   <Description>Types that implement IComparable should redefine Equals and comparison operators to keep the meanings of less than, greater than, and equals consistent throughout the type.</Description>
   <Resolution Name="Equals">{0} should override Equals since it implements IComparable.</Resolution>
   <Resolution Name="Operator">{0} should define operator '{1}' since it implements IComparable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182163.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401">
   <Name>P/Invokes should not be visible</Name>
   <Description>Interop layer should not be public. The DllImport attribute should not be applied to publicly accessible members (public or protected).</Description>
   <Resolution Name="Default">Change the accessibility of P/Invoke {0} so that it is no longer visible from outside its assembly.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182209.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalError</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
   <Name>Parameter names should match base declaration</Name>
   <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
   <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182251.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
   <Name>Properties should not return arrays</Name>
   <Description>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</Description>
   <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/0fss9skc.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721">
   <Name>Property names should not match get methods</Name>
   <Description>A Get method was found with the same name as a property. Get methods and properties should have names that clearly distinguish their function. See the design guidelines for information regarding choosing properties over methods.</Description>
   <Resolution Name="SameType">The property name {0} is confusing given the existence of method {1}. Rename or remove one of these members.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182253.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewMisleadingFieldNames" Category="Microsoft.Maintainability" CheckId="CA1504">
   <Name>Review misleading field names</Name>
   <Description>Review field names which, by convention, appear to indicate they are instance or static but, in fact, are not. This rule fires against instance fields which have names prefixed with "s_" and static fields which are prefixed with "m_".</Description>
   <Resolution Name="Static">The field name {0} suggests that it is instance data but it is declared as static (Shared in Visual Basic). Review this member to verify that it should be static, or consider changing the field name.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb164506.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182189.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101">
   <Name>Specify marshaling for P/Invoke string arguments</Name>
   <Description>When marshaling strings as ANSI (or as Auto on Win9x), some characters may be changed. If best-fit mapping is on, strings that appear different in Unicode will be marshaled to identical ANSI strings, which may lead to incorrect security decisions. Turning best-fit mapping off reduces this risk, as all characters without equivalents are mapped to '?'. Also, note that CharSet.Ansi is the default setting for all string marshaling; Unicode marshaling must be specified explicitly, either as a CharSet setting of DllImport or StructLayout, or as a MarshalAs attribute with a Unicode (or system-dependent) UnmanagedType.</Description>
   <Resolution Name="ParameterImplicitAnsi">To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182319.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386080.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="Default">Because type {0} contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724">
   <Name>Type names should not match namespaces</Name>
   <Description>Identifiers which conflict in whole or in part with namespace names should be avoided. Names that describe the purpose or contents of a type are preferred.</Description>
   <Resolution Name="System">The type name {0} conflicts in whole or in part with the namespace name '{1}' defined in the .NET Framework. Rename the type to eliminate the conflict.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182257.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030">
   <Name>Use events where appropriate</Name>
   <Description>A method name suggestive of event functionality was encountered.</Description>
   <Resolution Name="Default">Consider making {0} an event.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182177.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726">
   <Name>Use preferred terms</Name>
   <Description>Use preferred terms over deprecated alternates.</Description>
   <Resolution Name="MemberNoAlternate">Replace the term '{0}' in member name {1} with an appropriate alternate or remove it entirely.</Resolution>
   <Resolution Name="MemberParameterNoAlternate">In member {0}, replace the term '{1}' in parameter name {2} with an appropriate alternate or remove it entirely.</Resolution>
   <Resolution Name="TypeNoAlternate">Replace the term '{0}' in type name {1} with an appropriate alternate or remove it entirely.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182258.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
 <Exceptions>
  <Exception Keyword="CA0068" Kind="Engine" TreatAsWarning="True">
   <Type>Microsoft.FxCop.Sdk.FxCopException</Type>
   <ExceptionMessage>Debug information could not be found for target assembly 'Ultima.dll'. For best analysis results, include the .pdb file with debug information for 'Ultima.dll' in the same directory as the target assembly.</ExceptionMessage>
  </Exception>
 </Exceptions>
</FxCopReport>
